-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 192.99.232.179    Database: rssheap
-- ------------------------------------------------------
-- Server version	5.7.17-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (2338572,36735,'The web can be anything we want it to be','<p>I really enjoyed this chat between Bruce Lawson and Mustafa Kurtuldu where they talked about browser support and the health of the web. Bruce expands upon a lot of the thoughts in a post he wrote last year called <a href=\"https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/\">World Wide Web, Not Wealthy Western Web</a> where he writes:</p>\n<blockquote><p>...across the world, regardless of disposable income, regardless of hardware or network speed, people want to consume the same kinds of goods and services. And if your websites are made for the whole world, not just the wealthy Western world, then the next 4 billion people might consume the stuff that your organization makes.</p></blockquote>\n<p><span id=\"more-272034\"></span></p>\n<p>Another highlight is where Bruce also mentions that, as web developers, we might think that we’ve all moved on from jQuery as a community, and yet there are still millions of websites that depend upon jQuery to function properly. It\'s an interesting anecdote and relevant to recent discussions about React making a run at being the next thing to replace jQuery:</p>\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\">\n<p lang=\"en\" dir=\"ltr\">I’m just gonna throw this bomb here: </p>\n<p>React is the new jQuery</p>\n<p>There you go.</p>\n<p>&mdash; Sara Soueidan (@SaraSoueidan) <a href=\"https://twitter.com/SaraSoueidan/status/999645120155746304?ref_src=twsrc%5Etfw\">May 24, 2018</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>However! The most interesting part of this particular discussion, for me at least, is where they talk about Flash and the impact it had on the design of CSS3 and HTML5. They both argue that despite Flash’s shortcomings and accessibility issues, it happened to show us all that the web can be much more than just a place to store some hypertext and that ultimately it can be anything we want it to be.</p>\n<p><a href=\"https://www.youtube.com/watch?v=tvLF7zllsv0\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/the-web-can-be-anything-we-want-it-to-be/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/the-web-can-be-anything-we-want-it-to-be/\">The web can be anything we want it to be</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://www.youtube.com/watch?v=tvLF7zllsv0',0,69,0,'2018-06-06 16:59:02','2018-06-07 11:38:49','2018-06-07 11:38:46','07d32960046602832343d650db8781fa','b4C8PrB','',NULL),(2338573,36735,'Frustration','<p>Jeremy Keith talks about a couple of recent frustrating moments in his life. One regarding a musical instrument, one involving a build process:</p>\n<blockquote><p>That feeling of frustration I get from having wiring issues with a musical instrument is the same feeling I get whenever something goes awry with my web server. I know just enough about servers to be dangerous. When something goes wrong, I feel very out of my depth, and again, I have no idea how long it will take the fix the problem: minutes, hours, days, or weeks.</p></blockquote>\n<p>I echo his later sentiment that moments like these become great writing opportunities. </p>\n<p>I\'d say that it\'s <em>always</em> OK to experience frustration. It doesn\'t make you a lesser developer, at any level. But at the same time, the more experienced of a developer you become, less things will trigger that frustration, because of the resources you\'ve built up to deal with those situations. Notice Jeremy didn\'t give up and a co-worker came to the rescue.</p>\n<p><a href=\"https://adactio.com/journal/13893\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/frustration/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/frustration/\">Frustration</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://adactio.com/journal/13893',0,16,0,'2018-05-31 18:26:44','2018-06-07 11:39:03','2018-06-07 11:39:00','04fa8783629aa2e0e8801d46ac974635','n4KEd83','',NULL),(2338574,36735,'Animate Images and Videos with curtains.js','<p>While browsing the latest award-winning websites, you may notice a lot of fancy image distortion animations or neat 3D effects. Most of them are created with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API\">WebGL</a>, an API allowing GPU-accelerated image processing effects and animations. They also tend to use libraries built <em>on top</em> of WebGL such as <a href=\"https://threejs.org/\">three.js</a> or <a href=\"http://www.pixijs.com/\">pixi.js</a>. Both are very powerful tools to create respectively 2D and 3D scenes.</p>\n<p>But, you should keep in mind that those libraries were not originally designed to create slideshows or animate DOM elements. There is a library designed just for that, though, and we’re going to cover how to use it here in this post.</p>\n<p><span id=\"more-271818\"></span></p>\n<figure id=\"post-271820\" class=\"align-none media-271820\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/curtainsjs-1.gif\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_971,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 971w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_931,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 931w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_892,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 892w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_846,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 846w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_798,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 798w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_742,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 742w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_693,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 693w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_634,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 634w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_574,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 574w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_504,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 504w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_417,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 417w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_324,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 324w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527627328/curtainsjs-1_juy0gq.gif 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<h3>WebGL, CSS Positioning, and Responsiveness</h3>\n<p>Say you’re working with a library like three.js or pixi.js and you want to use it to create interactions, like mouseover and scroll events on elements. You might run into trouble! How do you position your WebGL elements relative to the document and other DOM elements? How would handle responsiveness?</p>\n<p>This is exactly what I had in mind when creating <a href=\"https://www.martin-laxenaire.fr/libs/curtainsjs/\">curtains.js</a>.</p>\n<p>Curatins.js allows you to create <em>planes</em> containing images and videos (in WebGL we will call them <em>textures</em>) that act like plain HTML elements, with position and size defined by CSS rules. But these planes can be enhanced with the endless possibilities of WebGL and shaders.</p>\n<h3>Wait, shaders?</h3>\n<p>Shaders are small programs written in <abbr title=\"OpenGL Shading Language\"><a href=\"https://en.wikipedia.org/wiki/OpenGL_Shading_Language\">GLSL</a></abbr> that will tell your <abbr title=\"Graphics processing unit\">GPU</abbr> how to render your planes. Knowing how shaders work is mandatory here because this is how we will handle animations. If you’ve never heard of them, you may want to learn the basics first. There are plenty of good websites to start learning them, like <a href=\"https://thebookofshaders.com/\">The Book of Shaders</a>.</p>\n<p>Now that you get the idea, let’s create our first plane!</p>\n<h3>Setup of a basic plane</h3>\n<p>To display our first plane, we will need a bit of HTML, CSS, and some JavaScript to create the plane. Then our shaders will animate it.</p>\n<h4>HTML</h4>\n<p>The HTML will be really simple here. We will create a <code>&lt;div&gt;</code> that will hold our canvas, and a div that will hold our image.</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;body&gt;\n  &lt;!-- div that will hold our WebGL canvas --&gt;\n  &lt;div id=\"canvas\"&gt;&lt;/div&gt;\n\n    &lt;!-- div used to create our plane --&gt;\n    &lt;div class=\"plane\"&gt;\n\n      &lt;!-- image that will be used as a texture by our plane --&gt;\n      &lt;img src=\"path/to/my-image.jpg\" /&gt;\n      \n    &lt;/div&gt;\n\n&lt;/body&gt;</code></pre>\n<h4>CSS</h4>\n<p>We will will use CSS to make sure the <code>&lt;div&gt;</code> that wraps the canvas will be bigger than our plane, and apply any size to the plane div. (Our WebGL plane will have the exact same size and positions of this div.)</p>\n<pre rel=\"CSS\"><code class=\"language-css\">body {\n  /* make the body fit our viewport */\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  margin: 0;\n  \n  /* hide scrollbars */\n  overflow: hidden;\n}\n\n#canvas {\n  /* make the canvas wrapper fit the document */\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n.plane {\n  /* define the size of your plane */\n  width: 80%;\n  max-width: 1400px;\n  height: 80vh;\n  position: relative;\n  top: 10vh;\n  margin: 0 auto;\n}\n\n.plane img {\n  /* hide the img element */\n  display: none;\n}</code></pre>\n<h4>JavaScript</h4>\n<p>There\'s a bit more work in the JavaScript. We need to instantiate our WebGL context, create a plane with uniform parameters, and use it.</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">window.onload = function() {\n  // pass the id of the div that will wrap the canvas to set up our WebGL context and append the canvas to our wrapper\n  var webGLCurtain = new Curtains(\"canvas\");\n\n  // get our plane element\n  var planeElement = document.getElementsByClassName(\"plane\")[0];\n\n  // set our initial parameters (basic uniforms)\n  var params = {\n    vertexShaderID: \"plane-vs\", // our vertex shader ID\n    fragmentShaderID: \"plane-fs\", // our framgent shader ID\n    uniforms: {\n      time: {\n        name: \"uTime\", // uniform name that will be passed to our shaders\n        type: \"1f\", // this means our uniform is a float\n        value: 0,\n      },\n    }\n  }\n\n  // create our plane mesh\n  var plane = webGLCurtain.addPlane(planeElement, params);\n\n  // use the onRender method of our plane fired at each requestAnimationFrame call\n  plane.onRender(function() {\n    plane.uniforms.time.value++; // update our time uniform value\n  });\n\n}</code></pre>\n<h4>Shaders</h4>\n<p>We need to write the vertex shader. It won’t be doing much except position our plane based on the model view and projection matrix and pass varyings to the fragment shader:</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;!-- vertex shader --&gt;\n&lt;script id=\"plane-vs\" type=\"x-shader/x-vertex\"&gt;\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  // those are the mandatory attributes that the lib sets\n  attribute vec3 aVertexPosition;\n  attribute vec2 aTextureCoord;\n\n  // those are mandatory uniforms that the lib sets and that contain our model view and projection matrix\n  uniform mat4 uMVMatrix;\n  uniform mat4 uPMatrix;\n\n  // if you want to pass your vertex and texture coords to the fragment shader\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n\n  void main() {\n    // get the vertex position from its attribute\n    vec3 vertexPosition = aVertexPosition;\n    // set its position based on projection and model view matrix\n    gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\n    // set the varyings\n    vTextureCoord = aTextureCoord;\n    vVertexPosition = vertexPosition;\n  }\n&lt;/script&gt;</code></pre>\n<p>Now our fragment shader. This is where we will add a little displacement effect based on our time uniform and the texture coordinates.</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;!-- fragment shader --&gt;\n&lt;script id=\"plane-fs\" type=\"x-shader/x-fragment\"&gt;\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  // get our varyings\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n\n  // the uniform we declared inside our javascript\n  uniform float uTime;\n\n  // our texture sampler (this is the lib default name, but it could be changed)\n  uniform sampler2D uSampler0;\n\n  void main() {\n    // get our texture coords\n    vec2 textureCoord = vTextureCoord;\n\n    // displace our pixels along both axis based on our time uniform and texture UVs\n    // this will create a kind of water surface effect\n    // try to comment a line or change the constants to see how it changes the effect\n    // reminder : textures coords are ranging from 0.0 to 1.0 on both axis\n    const float PI = 3.141592;\n\n    textureCoord.x += (\n      sin(textureCoord.x * 10.0 + ((uTime * (PI / 3.0)) * 0.031))\n      + sin(textureCoord.y * 10.0 + ((uTime * (PI / 2.489)) * 0.017))\n      ) * 0.0075;\n\n    textureCoord.y += (\n      sin(textureCoord.y * 20.0 + ((uTime * (PI / 2.023)) * 0.023))\n      + sin(textureCoord.x * 20.0 + ((uTime * (PI / 3.1254)) * 0.037))\n      ) * 0.0125;\n          \n    gl_FragColor = texture2D(uSampler0, textureCoord);\n  }\n&lt;/script&gt;</code></pre>\n<p>Et voilà! You’re all done, and if everything went well, you should be seeing something like this.</p>\n<p data-height=\"425\" data-theme-id=\"1\" data-slug-hash=\"pVQYoG\" data-default-tab=\"result\" data-user=\"martinlaxenaire\" data-embed-version=\"2\" data-pen-title=\"curtains.js basic plane\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/martinlaxenaire/pen/pVQYoG/\">curtains.js basic plane</a> by Martin Laxenaire (<a href=\"https://codepen.io/martinlaxenaire\">@martinlaxenaire</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<h3>Adding 3D and interactions</h3>\n<p>Alright, that’s pretty cool so far, but we started this post talking about 3D and interactions, so let’s look at how we could add those in.</p>\n<h4>About vertices</h4>\n<p>To add a 3D effect we would have to change the plane vertices position inside the vertex shader. However in our first example, we did not specify how many vertices our plane should have, so it was created with a default geometry containing six vertices forming two triangles :</p>\n<figure id=\"post-271821\" class=\"align-none media-271821\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/curtainsjs-2.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527627364/curtainsjs-2_kkuzwl.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527627364/curtainsjs-2_kkuzwl.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>In order to get decent 3D animations, we would need more triangles, thus more vertices:</p>\n<figure id=\"post-271822\" class=\"align-none media-271822\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/curtainsjs-3.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527627368/curtainsjs-3_dvna0m.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_984,f_auto,q_auto/v1527627368/curtainsjs-3_dvna0m.jpg 984w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_712,f_auto,q_auto/v1527627368/curtainsjs-3_dvna0m.jpg 712w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_470,f_auto,q_auto/v1527627368/curtainsjs-3_dvna0m.jpg 470w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527627368/curtainsjs-3_dvna0m.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>This plane has five segments along its width and five segments along its height. As a result, we have 50 triangles and 150 total vertices.</figcaption></figure>\n<h3>Refactoring our JavaScript</h3>\n<p>Fortunately, it is easy to specify our plane definition as it could be set inside our initial parameters.</p>\n<p>We are also going to listen to mouse position to add a bit of interaction. To do it properly, we will have to wait for the plane to be ready, convert our mouse document coordinates to our WebGL clip space coordinates and send them to the shaders as a uniform.</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">// we are using window onload event here but this is not mandatory\nwindow.onload = function() {\n  // track the mouse positions to send it to the shaders\n  var mousePosition = {\n    x: 0,\n    y: 0,\n  };\n\n  // pass the id of the div that will wrap the canvas to set up our WebGL context and append the canvas to our wrapper\n  var webGLCurtain = new Curtains(\"canvas\");\n\n  // get our plane element\n  var planeElement = document.getElementsByClassName(\"plane\")[0];\n\n  // set our initial parameters (basic uniforms)\n  var params = {\n    vertexShaderID: \"plane-vs\", // our vertex shader ID\n    fragmentShaderID: \"plane-fs\", // our framgent shader ID\n    widthSegments: 20,\n    heightSegments: 20, // we now have 20*20*6 = 2400 vertices !\n    uniforms: {\n      time: {\n        name: \"uTime\", // uniform name that will be passed to our shaders\n        type: \"1f\", // this means our uniform is a float\n        value: 0,\n      },\n      mousePosition: { // our mouse position\n        name: \"uMousePosition\",\n        type: \"2f\", // notice this is a length 2 array of floats\n        value: [mousePosition.x, mousePosition.y],\n      },\n      mouseStrength: { // the strength of the effect (we will attenuate it if the mouse stops moving)\n        name: \"uMouseStrength\", // uniform name that will be passed to our shaders\n        type: \"1f\", // this means our uniform is a float\n        value: 0,\n      },\n\n    }\n  }\n\n  // create our plane mesh\n  var plane = webGLCurtain.addPlane(planeElement, params);\n\n  // once our plane is ready, we could start listening to mouse/touch events and update its uniforms\n  plane.onReady(function() {\n    // set a field of view of 35 to exagerate perspective\n    // we could have done it directly in the initial params\n    plane.setPerspective(35);\n    // listen our mouse/touch events on the whole document\n    // we will pass the plane as second argument of our function\n    // we could be handling multiple planes that way\n    document.body.addEventListener(\"mousemove\", function(e) {\n      handleMovement(e, plane);\n    });\n    document.body.addEventListener(\"touchmove\", function(e) {\n      handleMovement(e, plane);\n    });\n  }).onRender(function() {\n    // update our time uniform value\n    plane.uniforms.time.value++;\n    // continually decrease mouse strength\n    plane.uniforms.mouseStrength.value = Math.max(0, plane.uniforms.mouseStrength.value - 0.0075);\n  });\n\n  // handle the mouse move event\n  function handleMovement(e, plane) {\n    // touch event\n    if(e.targetTouches) {\n      mousePosition.x = e.targetTouches[0].clientX;\n      mousePosition.y = e.targetTouches[0].clientY;\n    }\n    // mouse event\n    else {\n      mousePosition.x = e.clientX;\n      mousePosition.y = e.clientY;\n    }\n    // convert our mouse/touch position to coordinates relative to the vertices of the plane\n    var mouseCoords = plane.mouseToPlaneCoords(mousePosition.x, mousePosition.y);\n    // update our mouse position uniform\n    plane.uniforms.mousePosition.value = [mouseCoords.x, mouseCoords.y];\n    \n    // reassign mouse strength\n    plane.uniforms.mouseStrength.value = 1;\n  }\n\n}</code></pre>\n<p>Now that our JavaScript is done, we have to rewrite our shaders so that they’ll use our mouse position uniform.</p>\n<h3>Refactoring the shaders</h3>\n<p>Let’s look at our vertex shader first. We have three uniforms that we could use for our effect: </p>\n<ol>\n<li>the time which is constantly increasing</li>\n<li>the mouse position</li>\n<li>our mouse strength, which is constantly decreasing until the next mouse move</li>\n</ol>\n<p>We will use all three of them to create a kind of 3D ripple effect.</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;script id=\"plane-vs\" type=\"x-shader/x-vertex\"&gt;\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  // those are the mandatory attributes that the lib sets\n  attribute vec3 aVertexPosition;\n  attribute vec2 aTextureCoord;\n\n  // those are mandatory uniforms that the lib sets and that contain our model view and projection matrix\n  uniform mat4 uMVMatrix;\n  uniform mat4 uPMatrix;\n\n  // our time uniform\n  uniform float uTime;\n\n  // our mouse position uniform\n  uniform vec2 uMousePosition;\n\n  // our mouse strength\n  uniform float uMouseStrength;\n\n  // if you want to pass your vertex and texture coords to the fragment shader\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n\n  void main() {\n    vec3 vertexPosition = aVertexPosition;\n\n    // get the distance between our vertex and the mouse position\n    float distanceFromMouse = distance(uMousePosition, vec2(vertexPosition.x, vertexPosition.y));\n\n    // this will define how close the ripples will be from each other. The bigger the number, the more ripples you\'ll get\n    float rippleFactor = 6.0;\n\n    // calculate our ripple effect\n    float rippleEffect = cos(rippleFactor * (distanceFromMouse - (uTime / 120.0)));\n\n    // calculate our distortion effect\n    float distortionEffect = rippleEffect * uMouseStrength;\n\n    // apply it to our vertex position\n    vertexPosition +=  distortionEffect / 15.0;\n\n    gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\n    // varyings\n    vTextureCoord = aTextureCoord;\n    vVertexPosition = vertexPosition;\n  }\n&lt;/script&gt;</code></pre>\n<p>As for the fragment shader, we are going to keep it simple. We are going to fake lights and shadows based on each vertex position:</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;script id=\"plane-fs\" type=\"x-shader/x-fragment\"&gt;\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  // get our varyings\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n\n  // our texture sampler (this is the lib default name, but it could be changed)\n  uniform sampler2D uSampler0;\n\n  void main() {\n    // get our texture coords\n    vec2 textureCoords = vTextureCoord;\n\n    // apply our texture\n    vec4 finalColor = texture2D(uSampler0, textureCoords);\n\n    // fake shadows based on vertex position along Z axis\n    finalColor.rgb -= clamp(-vVertexPosition.z, 0.0, 1.0);\n\n    // fake lights based on vertex position along Z axis\n    finalColor.rgb += clamp(vVertexPosition.z, 0.0, 1.0);\n\n    // handling premultiplied alpha (useful if we were using a png with transparency)\n    finalColor = vec4(finalColor.rgb * finalColor.a, finalColor.a);\n\n    gl_FragColor = finalColor;\n  }\n&lt;/script&gt;</code></pre>\n<p>And there you go!</p>\n<p data-height=\"425\" data-theme-id=\"1\" data-slug-hash=\"ZomPXY\" data-default-tab=\"result\" data-user=\"martinlaxenaire\" data-embed-version=\"2\" data-pen-title=\"curtains.js ripple effect example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/martinlaxenaire/pen/ZomPXY/\">curtains.js ripple effect example</a> by Martin Laxenaire (<a href=\"https://codepen.io/martinlaxenaire\">@martinlaxenaire</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p>With these two simple examples, we’ve seen how to create a plane and interact with it.</p>\n<h3>Videos and displacement shaders</h3>\n<p>Our last example will create a basic fullscreen video slideshow using a displacement shader to enhance the transitions.</p>\n<h4>Displacement shader concept</h4>\n<p>The displacement shader will create a nice distortion effect. It will be written inside our fragment shader using a grayscale picture and will offset the pixel coordinates of the videos based on the texture RGB values. Here’s the image we will be using:</p>\n<figure id=\"post-271823\" class=\"align-none media-271823\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/curtainsjs.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527627376/curtainsjs_h8bvm9.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527627376/curtainsjs_h8bvm9.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>The effect will be calculated based on each pixel RGB value, with a black pixel being <code>[0, 0, 0]</code> and a white pixel <code>[1, 1, 1]</code> (GLSL equivalent for <code>[255, 255, 255]</code>). To simplify, we will use only the red channel value, as with a grayscale image red, green and blue are always equal.</p>\n<p>You can try to create your own grayscale image (it works great with geometric shape ) to get your unique transition effect.</p>\n<h4>Multiple textures and videos</h4>\n<p>A plane can have more than one texture simply by adding multiple image tags. This time, instead of images we want to use videos. We just have to replace the <code>&lt;img /&gt;</code> tags with a <code>&lt;video /&gt;</code> one. However there are two things to know when it comes to video:</p>\n<ul>\n<li>The video will always fit the exact size of the plane, which means your plane has to have the same width/height ratio as your video. This is not a big deal tho because it is easy to handle with CSS.</li>\n<li>On mobile devices, we can’t autoplay videos without a user gesture, like a click event. It is therefore safer to add a \"enter site\" button to display and launch our videos.</li>\n</ul>\n<h4>HTML</h4>\n<p>The HTML is still pretty straightforward. We will create our canvas div wrapper, our plane div containing the textures and a button to trigger the video autoplay. Just notice the use of the <code>data-sampler</code> attribute on the image and video tags—it will be useful inside our fragment shader.</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;body&gt;\n  &lt;div id=\"canvas\"&gt;&lt;/div&gt;\n  &lt;!-- this div will handle the fullscreen video sizes and positions --&gt;\n  &lt;div class=\"plane-wrapper\"&gt;\n    &lt;div class=\"plane\"&gt;\n      &lt;!-- notice here we are using the data-sampler attribute to name our sampler uniforms --&gt;\n      &lt;img src=\"path/to/displacement.jpg\" data-sampler=\"displacement\" /&gt;\n      &lt;video src=\"path/to/video.mp4\" data-sampler=\"firstTexture\"&gt;&lt;/video&gt;\n      &lt;video src=\"path/to/video-2.mp4\" data-sampler=\"secondTexture\"&gt;&lt;/video&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n    \n  &lt;div id=\"enter-site-wrapper\"&gt;\n    &lt;span id=\"enter-site\"&gt;\n      Click to enter site\n    &lt;/span&gt;\n  &lt;/div&gt;\n&lt;/body&gt;</code></pre>\n<h4>CSS</h4>\n<p>The stylesheet will handle a few things: display the button and hide the canvas before the user has entered the site, size and position our <code>plane-wrapper</code> div to handle fullscreen responsive videos.</p>\n<pre rel=\"CSS\"><code class=\"language-css\">@media screen {\n    \n  body {\n    margin: 0;\n    font-size: 18px;\n    font-family: \'PT Sans\', Verdana, sans-serif;\n    background: #212121;\n    line-height: 1.4;\n    height: 100vh;\n    width: 100vw;\n    overflow: hidden;\n  }\n    \n  /*** canvas ***/\n    \n  #canvas {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 10;\n    \n    /* hide the canvas until the user clicks the button */\n    opacity: 0;\n    transition: opacity 0.5s ease-in;\n  }\n  \n  /* display the canvas */\n  .video-started #canvas {\n    opacity: 1;\n  }\n  \n  .plane-wrapper {\n    position: absolute;\n    \n    /* center our plane wrapper */\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 15;\n  }\n    \n  .plane {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    \n    /* tell the user he can click the plane */\n    cursor: pointer;\n  }\n    \n  /* hide the original image and videos */\n  .plane img, .plane video {\n    display: none;\n  }\n    \n  /* center the button */\n  #enter-site-wrapper {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    align-content: center;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 30;\n  \n    /* hide the button until everything is ready */\n    opacity: 0;\n    transition: opacity 0.5s ease-in;\n  }\n  \n  /* show the button */\n  .curtains-ready #enter-site-wrapper {\n    opacity: 1;\n  }\n    \n  /* hide the button after the click event */\n  .curtains-ready.video-started #enter-site-wrapper {\n    opacity: 0;\n    pointer-events: none;\n  }\n    \n  #enter-site {\n    padding: 20px;\n    color: white;\n    background: #ee6557;\n    max-width: 200px;\n    text-align: center;\n    cursor: pointer;\n  }\n\n}\n\n/* fullscreen video responsive */\n@media screen and (max-aspect-ratio: 1920/1080) {\n  .plane-wrapper {\n    height: 100vh;\n    width: 177vh;\n  }\n}\n\n@media screen and (min-aspect-ratio: 1920/1080) {\n  .plane-wrapper {\n    width: 100vw;\n    height: 56.25vw;\n  }\n}</code></pre>\n<h4>JavaScript</h4>\n<p>As for the JavaScript, we will go like this:</p>\n<ul>\n<li>Set a couple variables to store our slideshow state</li>\n<li>Create the Curtains object and add the plane to it</li>\n<li>When the plane is ready, listen to a click event to start our videos playback (notice the use of the <code>playVideos()</code> method). Add another click event to switch between the two videos.</li>\n<li>Update our transition timer uniform inside the <code>onRender()</code> method</li>\n</ul>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">window.onload = function() {\n\n  // here we will handle which texture is visible and the timer to transition between images\n  var activeTexture = 1;\n  var transitionTimer = 0;\n  \n  // set up our WebGL context and append the canvas to our wrapper\n  var webGLCurtain = new Curtains(\"canvas\");\n  \n  // get our plane element\n  var planeElements = document.getElementsByClassName(\"plane\");\n  \n  // some basic parameters\n  var params = {\n    vertexShaderID: \"plane-vs\",\n    fragmentShaderID: \"plane-fs\",\n    imageCover: false, // our displacement texture has to fit the plane\n    uniforms: {\n      transitionTimer: {\n        name: \"uTransitionTimer\",\n        type: \"1f\",\n        value: 0,\n      },\n    },\n  }\n    \n  var plane = webGLCurtain.addPlane(planeElements[0], params);\n    \n  // create our plane\n  plane.onReady(function() {\n    // display the button\n    document.body.classList.add(\"curtains-ready\");\n  \n    // when our plane is ready we add a click event listener that will switch the active texture value\n    planeElements[0].addEventListener(\"click\", function() {\n      if(activeTexture == 1) {\n        activeTexture = 2;\n      }\n      else {\n        activeTexture = 1;\n      }\n    });\n    \n    // click to play the videos\n    document.getElementById(\"enter-site\").addEventListener(\"click\", function() {\n      // display canvas and hide the button\n      document.body.classList.add(\"video-started\");\n      \n      // play our videos\n      plane.playVideos();\n    }, false);\n    \n  }).onRender(function() {\n    // increase or decrease our timer based on the active texture value\n    // at 60fps this should last one second\n    if(activeTexture == 2) {\n      transitionTimer = Math.min(60, transitionTimer + 1);\n    }\n    else {\n      transitionTimer = Math.max(0, transitionTimer - 1);\n    }\n    // update our transition timer uniform\n    plane.uniforms.transitionTimer.value = transitionTimer;\n  });\n}</code></pre>\n<h4>Shaders</h4>\n<p>This is where all the magic will occur. Like in our first example, the vertex shader won’t do much and you’ll have to focus on the fragment shader that will create a “dive in\" effect:</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;script id=\"plane-vs\" type=\"x-shader/x-vertex\"&gt;\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  // default mandatory variables\n  attribute vec3 aVertexPosition;\n  attribute vec2 aTextureCoord;\n\n  uniform mat4 uMVMatrix;\n  uniform mat4 uPMatrix;\n\n  // varyings\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n\n  // custom uniforms\n  uniform float uTransitionTimer;\n\n  void main() {\n\n    vec3 vertexPosition = aVertexPosition;\n\n    gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\n    // varyings\n    vTextureCoord = aTextureCoord;\n    vVertexPosition = vertexPosition;\n  }\n&lt;/script&gt;\n\n&lt;script id=\"plane-fs\" type=\"x-shader/x-fragment\"&gt;\n  #ifdef GL_ES\n  precision mediump float;\n  #endif\n\n  varying vec3 vVertexPosition;\n  varying vec2 vTextureCoord;\n\n  // custom uniforms\n  uniform float uTransitionTimer;\n\n  // our textures samplers\n  // notice how it matches our data-sampler attributes\n  uniform sampler2D firstTexture;\n  uniform sampler2D secondTexture;\n  uniform sampler2D displacement;\n\n  void main( void ) {\n    // our texture coords\n    vec2 textureCoords = vec2(vTextureCoord.x, vTextureCoord.y);\n\n    // our displacement texture\n    vec4 displacementTexture = texture2D(displacement, textureCoords);\n\n    // our displacement factor is a float varying from 1 to 0 based on the timer\n    float displacementFactor = 1.0 - (cos(uTransitionTimer / (60.0 / 3.141592)) + 1.0) / 2.0;\n\n    // the effect factor will tell which way we want to displace our pixels\n    // the farther from the center of the videos, the stronger it will be\n    vec2 effectFactor = vec2((textureCoords.x - 0.5) * 0.75, (textureCoords.y - 0.5) * 0.75);\n\n    // calculate our displaced coordinates to our first video\n    vec2 firstDisplacementCoords = vec2(textureCoords.x - displacementFactor * (displacementTexture.r * effectFactor.x), textureCoords.y - displacementFactor * (displacementTexture.r * effectFactor.y));\n    // opposite displacement effect on the second video\n    vec2 secondDisplacementCoords = vec2(textureCoords.x - (1.0 - displacementFactor) * (displacementTexture.r * effectFactor.x), textureCoords.y - (1.0 - displacementFactor) * (displacementTexture.r * effectFactor.y));\n\n    // apply the textures\n    vec4 firstDistortedColor = texture2D(firstTexture, firstDisplacementCoords);\n    vec4 secondDistortedColor = texture2D(secondTexture, secondDisplacementCoords);\n\n    // blend both textures based on our displacement factor\n    vec4 finalColor = mix(firstDistortedColor, secondDistortedColor, displacementFactor);\n\n    // handling premultiplied alpha\n    finalColor = vec4(finalColor.rgb * finalColor.a, finalColor.a);\n\n    // apply our shader\n    gl_FragColor = finalColor;\n  }\n&lt;/script&gt;</code></pre>\n<p>Here’s our little video slideshow with a cool transition effect:</p>\n<p data-height=\"425\" data-theme-id=\"1\" data-slug-hash=\"ZoVmGP\" data-default-tab=\"result\" data-user=\"martinlaxenaire\" data-embed-version=\"2\" data-pen-title=\"curtains.js video slideshow\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/martinlaxenaire/pen/ZoVmGP/\">curtains.js video slideshow</a> by Martin Laxenaire (<a href=\"https://codepen.io/martinlaxenaire\">@martinlaxenaire</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p><script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script></p>\n<p>This example is a great way to show you how to create a slideshow with curtains.js: you might want to use images instead of videos, change the displacement texture, modify the fragment shader or even add more slides…</p>\n<h3>Going deeper</h3>\n<p>We’ve just scraped the surface of what’s possible with curtains.js. You could try to create multiple planes with a cool mouse over effect for your article thumbs for example. The possibilities are almost endless.</p>\n<p>If you want to see more examples covering all those basics usages, you can check the <a href=\"https://www.martin-laxenaire.fr/libs/curtainsjs/\">library website</a> or the <a href=\"https://github.com/martinlaxenaire/curtainsjs/\">GitHub repo</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/animate-images-and-videos-with-curtains-js/\">Animate Images and Videos with curtains.js</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/animate-images-and-videos-with-curtains-js/',0,32,0,'2018-06-06 14:00:22','2018-06-07 11:51:26','2018-06-07 11:51:24','444b0a9d1b8f807d1aaf9a556d8987d8','n5KHr2t','\0',NULL),(2338575,36735,'1 Element CSS Rainbow Gradient Infinity','<p>I first got the idea to CSS something of the kind when I saw this <a href=\"https://dribbble.com/shots/3192109-Gradient-infinity-logo\">gradient infinity logo</a> by <a href=\"https://dribbble.com/kirp\"> Infographic Paradise</a>:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/infinity_logo_ini.jpg\" alt=\"Original illustration. Shows a thick infinity symbol with a rainbow gradient filling its two loops and some highlights over this gradient.\"/><figcaption>The original gradient infinity.</figcaption></figure>\n<p>After four hours and some twenty minutes, of which over four hours were spent on tweaking positioning, edges and highlights... I finally had the result below:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/infinity_logo_end.png\" alt=\"Screenshot of my version. Shows a thick infinity symbol with a rainbow gradient filling its two loops and some highlights over this gradient.\"/><figcaption>My version of the rainbow gradient infinity.</figcaption></figure>\n<p>The gradient doesn\'t look like in the original illustration, as I chose to generate the rainbow logically instead of using the Dev Tools picker or something like that, but other than that, I think I got pretty close&mdash;let\'s see how I did that!</p>\n<p><span id=\"more-271321\"></span></p>\n<h3 id=\"markup\">Markup</h3>\n<p>As you\'ve probably already guessed from the title, the HTML is just one element:</p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class=\'∞\'&gt;&lt;/div&gt;</code></pre>\n<h3 id=\"styling\">Styling</h3>\n<h4 id=\"pick-approach\">Deciding on the approach</h4>\n<p>The first idea that might come to mind when seeing the above would be using conic gradients as border images. Unfortunately, <code>border-image</code> and <code>border-radius</code> don\'t play well together, as illustrated by the interactive demo below:</p>\n<p data-height=\"470\" data-theme-id=\"1\" data-slug-hash=\"jxZyed\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"border-image and border-radius don\'t play nice together\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/jxZyed/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>Whenever we set a <code>border-image</code>, <code>border-radius</code> just gets ignored, so using the two together is sadly not an option.</p>\n<p>So the approach we take here is using <code>conic-gradient()</code> backgrounds and then getting rid of the part in the middle with the help of a <code>mask</code>. Let\'s see how that works!</p>\n<h4 id=\"create-halves\">Creating the two ∞ halves</h4>\n<p>We first decide on an outer diameter.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$do: 12.5em;</code></pre>\n<p>We create the two halves of the infinity symbol using the <code>::before</code> and <code>::after</code> pseudo-elements of our <code>.∞</code> element. In order to place these two pseudo-elements next to one another, we use a flex layout on their parent (the infinity element <code>.∞</code>). Each of these has both the <code>width</code> and the <code>height</code> equal to the outer diameter <code>$do</code>. We also round them with a <code>border-radius</code> of <code>50%</code> and we give them a dummy <code>background</code> so we can see them.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.∞ {\n  display: flex;\n	\n  &amp;:before, &amp;:after {\n    width: $do; height: $do;\n    border-radius: 50%;\n    background: #000;\n    content: \'\';\n  }\n}</code></pre>\n<p>We\'ve also placed the <code>.∞</code> element in the middle of its parent (the <code>body</code> in this case) both vertically and horizontally by using the flexbox approach.</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"odEGzm\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #0\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/odEGzm/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<h4 id=\"conic-gradient\">How conic-gradient() works</h4>\n<p>In order to create the <a href=\"https://css-tricks.com/snippets/css/css-conic-gradient/\"><code>conic-gradient()</code></a> backgrounds for the two haves, we must first understand how the <code>conic-gradient()</code> function works.</p>\n<p>If inside the <code>conic-gradient()</code> function we have a list of stops without explicit positions, then the first is taken to be at <code>0%</code> (or <code>0deg</code>, same thing), the last is taken to be at <code>100%</code> (or <code>360deg</code>), while all those left are distributed evenly in the <code>[0%, 100%]</code> interval.</p>\n<p data-height=\"690\" data-theme-id=\"1\" data-slug-hash=\"gzvoKE\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"how conic-gradient() works (case: list of stops without explicit positions)\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/gzvoKE/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>If we have just <code>2</code> stops, it\'s simple. The first is at <code>0%</code>, the second (and last) at <code>100%</code> and there are no other stops in between.</p>\n<p>If we have <code>3</code> stops, the first is at <code>0%</code>, the last (third) at <code>100%</code>, while the second is dead in the middle of the <code>[0%, 100%]</code> interval, at <code>50%</code>.</p>\n<p>If we have <code>4</code> stops, the first is at <code>0%</code>, the last (fourth) at <code>100%</code>, while the second and third split the <code>[0%, 100%]</code> interval into <code>3</code> equal intervals, being positioned at <code>33.(3)%</code> and <code>66.(6)%</code> respectively.</p>\n<p>If we have <code>5</code> stops, the first is at <code>0%</code>, the last (fifth) at <code>100%</code>, while the second, third and fourth split the <code>[0%, 100%]</code> interval into <code>4</code> equal intervals being positioned at <code>25%</code>, <code>50%</code> and <code>75%</code> respectively.</p>\n<p>If we have <code>6</code> stops, the first is at <code>0%</code>, the last (sixth) at <code>100%</code>, while the second, third, fourth and fifth split the <code>[0%, 100%]</code> interval into <code>5</code> equal intervals being positioned at <code>20%</code>, <code>40%</code>, <code>60%</code> and <code>80%</code> respectively.</p>\n<p>In general, if we have <code>n</code> stops, the first is at <code>0%</code>, the last at <code>100%</code>, while the ones in between split the <code>[0%, 100%]</code> interval into <code>n-1</code> eqial intervals spanning <code>100%/(n-1)</code> each. If we give the stops <code>0</code>-based indices, then each one of them is positioned at <code>i*100%/(n-1)</code>.</p>\n<p>For the first one, <code>i</code> is <code>0</code>, which gives us <code>0*100%/(n-1) = 0%</code>.</p>\n<p>For the last (<code>n</code>-th) one, <code>i</code> is <code>n-1</code>, which gives us <code>(n-1)*100%/(n-1) = 100%</code>.</p>\n<p>Here, we choose to use <code>9</code> stops which means we split the <code>[0%, 100%]</code> interval into <code>8</code> equal intervals.</p>\n<p>Alright, but how do we get the stop list?</p>\n<h4 id=\'hsl-stops\'>The hsl() stops</h4>\n<p>Well, for simplicity, we choose to generate it as a list of <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\">HSL</a> values. We keep the <a href=\"https://en.wikipedia.org/wiki/Colorfulness#Saturation\">saturation</a> and the <a href=\"https://en.wikipedia.org/wiki/Lightness\">lightness</a> fixed and we vary the <a href=\"https://en.wikipedia.org/wiki/Hue\">hue</a>. The hue is an angle value that goes from <code>0</code> to <code>360</code>, as we can see here:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/hue_strip.png\" alt=\"Hue scale from 0 to 360 in the HSB/HSL models.\"/><figcaption>Visual representation of the hue scale from <code>0</code> to <code>360</code> (saturation and lightness being kept constant).</figcaption></figure>\n<p>With this in mind, we can construct a list of <code>hsl()</code> stops with fixed saturation and lightness and varying hue if we know the <strong>start hue</strong> <code>$hue-start</code>, the <strong>hue range</strong> <code>$hue-range</code> (this is the end hue minus the start hue) and the <strong>number of stops</strong> <code>$num-stops</code>.</p>\n<p>Let\'s say we keep the saturation and the lightness fixed at <code>85%</code> and <code>57%</code>, respectively (arbitrary values that can probably be tweaked for better results) and, for example, we might go from a start hue of <code>240</code> to an end hue of <code>300</code> and use <code>4</code> stops.</p>\n<p>In order to generate this list of stops, we use a <code>get-stops()</code> function that takes these three things as arguments:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@function get-stops($hue-start, $hue-range, $num-stops) {}</code></pre>\n<p>We create the list of stops <code>$list</code> which is originally empty (and which we\'ll return at the end after we populate it). We also compute the span of one of the equal intervals our stops split the full start to end interval into (<code>$unit</code>).</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@function get-stops($hue-start, $hue-range, $num-stops) {\n  $list: ();\n  $unit: $hue-range/($num-stops - 1);\n	\n  /* populate the list of stops $list */\n	\n  @return $list\n}</code></pre>\n<p>In order to populate our <code>$list</code>, we loop through the stops, compute the current hue, use the current hue to generate the <code>hsl()</code> value at that stop and then then add it to the list of stops:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@for $i from 0 to $num-stops {\n  $hue-curr: $hue-start + $i*$unit;\n  $list: $list, hsl($hue-curr, 85%, 57%);\n}</code></pre>\n<p>We can now use the stop list this function returns for any kind of gradient, as it can be seen from the usage examples for this function shown in the interactive demo below (navigation works both by using the previous/next buttons on the sides as well as the arrow keys and the <code>PgDn</code>/ <code>PgUp</code> keys):</p>\n<p data-height=\"570\" data-theme-id=\"1\" data-slug-hash=\"aGKorG\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"hue strip generator function examples\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/aGKorG/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>Note how, when our range passes one end of the <code>[0, 360]</code> interval, it continues from the other end. For example, when the start hue is <code>30</code> and the range is <code>-210</code> (the fourth example), we can only go down to <code>0</code>, so then we continue going down from <code>360</code>.</p>\n<h4 id=\"our-conic-gradients\">Conic gradients for our two halves</h4>\n<p>Alright, but how do we determine the <code>$hue-start</code> and the <code>$hue-range</code> for our particular case?</p>\n<p>In the original image, we draw a line in between the central points of the two halves of the loop and, starting from this line, going clockwise in both cases, we see where we start from and where we end up in the <code>[0, 360]</code> hue interval and what other hues we pass through.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/grad_plan_0_start_dir.png\" alt=\"Original illustration, annotated. We\'ve marked out the central points of the two halves, connected them with a line and used this line as the start for going around each of the two halves in the clockwise direction.\"/><figcaption>We start from the line connecting the central points of the two halves and we go around them in the clockwise direction.</figcaption></figure>\n<p>To simplify things, we consider we pass through the whole <code>[0, 360]</code> hue scale going along our infinity symbol. This means the range for each half is <code>180</code> (half of <code>360</code>) in absolute value.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/hue_scale_named.png\" alt=\"Hue scale from 0 to 360 in the HSB/HSL models, with saturation and lightness fixed at 100% and 50% respectively. Red corresponds to a hue of 0/ 360, yellow to a hue of 60, lime to a hue of 120, cyan to a hue of 180, blue to a hue of 240, magenta to a hue of 300.\"/><figcaption>Keywords to hue values correspondence for saturation and lightness fixed at <code>100%</code> and <code>50%</code> respectively.</figcaption></figure>\n<p>On the left half, we start from something that looks like it\'s in between some kind of <code>cyan</code> (hue <code>180</code>) and some kind of <code>lime</code> (hue <code>120</code>), so we take the start hue to be the average of the hues of these two <code>(180 + 120)/2 = 150</code>.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/grad_plan_1_left.png\" alt=\"Original illustration, annotated. For the left half, our start hue is 150 (something between a kind of cyan and a kind of lime), we pass through yellows, which are around 60 in hue and end up at a kind of red, 180 away from the start, so at 330.\"/><figcaption>The plan for the left half.</figcaption></figure>\n<p>We get to some kind of red, which is <code>180</code> away from the start value, so at <code>330</code>, whether we subtract or add <code>180</code>:</p>\n<pre><code>(150 - 180 + 360)%360 = (150 + 180 + 360)%360 = 330</code></pre>\n<p>So... do we go up or down? Well, we pass through yellows which are around <code>60</code> on the hue scale, so that\'s going down from <code>150</code>, not up. Going down means our range is negative (<code>-180</code>).</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/grad_plan_2_right.png\" alt=\"Original illustration, annotated. For the right half, our start hue is 150 (something between a kind of cyan and a kind of lime), we pass through blues, which are around 240 in hue and end up at a kind of red, 180 away from the start, so at 330.\"/><figcaption>The plan for the right half.</figcaption></figure>\n<p>On the right half, we also start from the same hue in between cyan and lime (<code>150</code>) and we also end at the same kind of red (<code>330</code>), but this time we pass through blues, which are around <code>240</code>, meaning we go up from our start hue of <code>150</code>, so our range is positive in this case (<code>180</code>).</p>\n<p>As far as the number of stops goes, <code>9</code> should suffice.</p>\n<p>Now update our code using the values for the left half as the defaults for our function:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@function get-stops($hue-start: 150, $hue-range: -180, $num-stops: 9) {\n  /* same as before */\n}\n\n.∞ {\n  display: flex;\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    background: conic-gradient(get-stops());\n  }\n  \n  &amp;:after {\n    background: conic-gradient(get-stops(150, 180));\n  }\n}</code></pre>\n<p>And now our two discs have <code>conic-gradient()</code> backgrounds:</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"wjjVmx\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #1\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/wjjVmx/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>However, we don\'t want these conic gradients to start from the top.</p>\n<p>For the first disc, we want it to start from the right&mdash;that\'s at <code>90°</code> from the top in the clockwise (positive) direction. For the second disc, we want it to start from the left&mdash;that\'s at <code>90°</code> from the top in the other (negative) direction, which is equivalent to <code>270°</code> from the top in the clockwise direction (because negative angles don\'t appear to work from some reason).</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/grad_ang_off.png\" alt=\"The conic gradient for the first (left) half starts from the right, which means an offset of 90° in the clockwise (positive) direction from the top. The conic gradient for the second (right) half starts from the left, which means an offset of 270° in the clockwise (positive) direction (and of 90° in the negative direction) from the top.\"/><figcaption>Angular offsets from the top for our two halves.</figcaption></figure>\n<p>Let\'s modify our code to achieve this:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.∞ {\n  display: flex;\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    background: conic-gradient(from 90deg, get-stops());\n  }\n  \n  &amp;:after {\n    background: conic-gradient(from 270deg, get-stops(150, 180));\n  }\n}</code></pre>\n<p>So far, so good!</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"XqqvOX\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #2\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/XqqvOX/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<h4 id=\"pie-to-donut\">From &#x1f967; to &#x1f369;</h4>\n<p>The next step is to cut holes out of our two halves. We do this with a <code>mask</code> or, more precisely, with a <code>radial-gradient()</code> one. This cuts out Edge support for now, but since it\'s something that\'s <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/masks/?q=masks\">in development</a>, it\'s probably going to be a cross-browser solution at some point in the not too far future.</p>\n<p>Remember that CSS gradient masks are <code>alpha</code> masks by default (and only Firefox currently allows changing this via <code>mask-mode</code>), meaning that only the alpha channel matters. Overlaying the <code>mask</code> over our element makes every pixel of this element use the <code>alpha</code> channel of the corresponding pixel of the <code>mask</code>. If the <code>mask</code> pixel is completely <code>transparent</code> (its <code>alpha</code> value is <code>0</code>), then so will the corresponding pixel of the element.</p>\n<p data-height=\"420\" data-theme-id=\"1\" data-slug-hash=\"dzvQZQ\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient overlay vs. same gradient mask\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/dzvQZQ/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>In order to create the <code>mask</code>, we compute the outer radius <code>$ro</code> (half the outer diameter <code>$do</code>) and the inner radius <code>$ri</code> (a fraction of the outer radius <code>$ro</code>).</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$ro: .5*$do;\n$ri: .52*$ro;\n$m: radial-gradient(transparent $ri, red 0);</code></pre>\n<p>We then set the <code>mask</code> on our two halves:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.∞ {\n  /* same as before */\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    mask: $m;\n  }\n}</code></pre>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"xjjvog\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #3\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/xjjvog/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>This looks perfect in Firefox, but the edges of radial gradients with abrupt transitions from one stop to another look ugly in Chrome and, consequently, so do the inner edges of our rings.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/rad_grad_jagged_edges_chrome.png\" alt=\"Screenshot. Shows a close-up of the inner edge of the right half in Chrome. These inner edges look jagged and ugly in Chrome.\"/><figcaption>Close-up of the inner edge of the right half in Chrome.</figcaption></figure>\n<p>The fix here would be not to have an abrupt transition between stops, but spread it out over a small distance, let\'s say half a pixel:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$m: radial-gradient(transparent calc(#{$ri} - .5px), red $ri);</code></pre>\n<p>We now <a href=\"https://codepen.io/thebabydino/pen/QrYjRP\">got rid of the jagged edges</a> in Chrome:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/rad_grad_blurred_edges_chrome.png\" alt=\"Screenshot. Shows a close-up of the inner edge of the right half in Chrome after spreading out the transition between stops over half a pixel. These inner edges now look blurry and smoother in Chrome.\"/><figcaption>Close-up of the inner edge of the right half in Chrome after spreading out the transition between stops over half a pixel.</figcaption></figure>\n<p>The following step is to offset the two halves such that they actually form an infinity symbol. The visible circular strips both have the same width, the difference between the outer radius <code>$ro</code> and the inner radius <code>$ri</code>. This means we need to shift each laterally by half this difference <code>$ri - $ri</code>.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.∞ {\n  /* same as before */\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    margin: 0 (-.5*($ro - $ri));\n  }\n}</code></pre>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"WJyeje\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #4\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/WJyeje/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<h4 id=\"intersecting-halves\">Intersecting halves</h4>\n<p>We\'re getting closer, but we still have a very big problem here. We don\'t want the right part of the loop to be completely over the left one. Instead, we want the top half of the right part to be over that of the left part and the bottom half of the left part to be over that of the right part.</p>\n<p>So how do we achieve that?</p>\n<p>We take a similar approach to that presented in an <a href=\"https://css-tricks.com/things-watch-working-css-3d/\">older article</a>: using 3D!</p>\n<p>In order to better understand how this works, consider the two card example below. When we rotate them around their <var>x</var> axes, they\'re not in the plane of the screen anymore. A positive rotation brings the bottom forward and pushes the top back. A negative rotation brings the top forward and pushes the bottom back.</p>\n<p data-height=\"490\" data-theme-id=\"1\" data-slug-hash=\"MGqgyM\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"Intersection with 3D transforms (no Edge support)\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/MGqgyM/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p class=\'explanation\'>Note that the demo above doesn\'t work in Edge.</p>\n<p>So if we give the left one a positive rotation and the right one a negative rotation, then the top half of the right one appears in front of the top half of the left one and the other way around for the bottom halves.</p>\n<p>Addiing <code>perspective</code> makes what\'s closer to our eyes appears bigger and what\'s further away appears smaller and we use way smaller angles. Without it, we have the 3D plane intersection without the 3D appearance.</p>\n<p>Note that both our halves need to be in the same 3D context, something that\'s achieved by setting <code>transform-style: preserve-3d</code> on the <code>.∞</code> element.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.∞ {\n  /* same as before */\n  transform-style: preserve-3d;\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    transform: rotatex(1deg);\n  }\n  \n  &amp;:after {\n    /* same as before */\n    transform: rotatex(-1deg);\n  }\n}</code></pre>\n<p>And now we\'re almost there, but not quite:</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"WJKVyM\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #5\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/WJKVyM/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<h4 id=\"fine-tuning\">Fine tuning</h4>\n<p>We have a little reddish strip in the middle because the gradient ends and the intersection line don\'t quite match:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/con_grad_end_miss.png\" alt=\"Screenshot. Shows a close-up of the intersection of the two halves. In theory, the intersection line should match the start/ end line of the conic gradients, but this isn\'t the case in practice, so we\'re still seeing a strip of red along it, even though the red side should be behind the plane of the screen and not visible.\"/><figcaption>Close-up of small issue at the intersection of the two halves.</figcaption></figure>\n<p>A pretty ugly, but efficient fix is to add a <code>1px</code> translation before the rotation on the right part (the <code>::after</code> pseudo-element):</p>\n<pre rel=\"CSS\"><code class=\"language-css\">.∞:after { transform: translate(1px) rotatex(-1deg) }</code></pre>\n<p>Much better!</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"erLWWO\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #6\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/erLWWO/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>This still isn\'t perfect though. Since the inner edges of our two rings are a bit blurry, the transition in between them and the crisp outer ones looks a bit odd, so maybe we can do better there:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/con_grad_crisp_blurry.png\" alt=\"Screenshot. Shows a close-up of the area around the intersection of the two halves, where the crisp outer edges meet the blurry inner ones, which looks odd.\"/><figcaption>Close-up of continuity issue (crisp outer edges meeting blurry inner ones).</figcaption></figure>\n<p>A quick fix here would be to add a <code>radial-gradient()</code> cover on each of the two halves. This cover is transparent white for most of the unmasked part of the two halves and goes to solid white along both their inner and outer edges such that we have nice continuity:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$gc: radial-gradient(#fff $ri, rgba(#fff, 0) calc(#{$ri} + 1px), \n  rgba(#fff, 0) calc(#{$ro} - 1px), #fff calc(#{$ro} - .5px));\n\n.∞ {\n  /* same as before */\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    background: $gc, conic-gradient(from 90deg, get-stops());\n  }\n  \n  &amp;:after {\n    /* same as before */\n    background: $gc, conic-gradient(from 270deg, get-stops(150, 180));\n  }\n}</code></pre>\n<p>The benefit becomes more obvious once we add a dark <code>background</code> to the <code>body</code>:</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"OZdNgN\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #7\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/OZdNgN/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>Now it looks better even when zooming in:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/con_grad_continuity.png\" alt=\"Screenshot. Shows a close-up of the area around the intersection of the two halves, we don\'t have the same sharp contrast between inner and outer edges, not even when zooming in.\"/><figcaption>No more sharp contrast between inner and outer edges.</figcaption></figure>\n<h4 id=\"final-result\">The final result</h4>\n<p>Finally, we add some prettifying touches by layering some more subtle radial gradient highlights over the two halves. This was the part that took me the most because it involved the least amount of logic and the most amount of trial and error. At this point, I just layered the original image underneath the <code>.∞</code> element, made the two halves semi-transparent and started adding gradients and tweaking them until they pretty much matched the highlights. And you can see when I got sick of it because that\'s when the position values become rougher approximations with fewer decimals.</p>\n<p>Another cool touch would be drop shadows on the whole thing using a <code>filter</code> on the <code>body</code>. Sadly, this breaks the 3D intersection effect in Firefox, which means we cannot add it there, too.</p>\n<pre rel=\"CSS\"><code class=\"language-css\">@supports not (-moz-transform: scale(2)) {\n  filter: drop-shadow(.25em .25em .25em #000) \n          drop-shadow(.25em .25em .5em #000);\n}</code></pre>\n<p>We now have the final static result!</p>\n<p data-height=\"290\" data-theme-id=\"1\" data-slug-hash=\"RydWNr\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"gradient ∞ - step #8\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/RydWNr/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<h3>Spicing it up with animation!</h3>\n<p>When I first shared this demo, I got asked about animating it. I initially thought this would be complicated, but then it hit me that, thanks to Houdini, it doesn\'t have to be!</p>\n<p>As mentioned in <a href=\"https://css-tricks.com/the-state-of-changing-gradients-with-css-transitions-and-animations\">my previous article</a>, we can animate in between stops, let\'s say from a red to a blue. In our case, the saturation and lightness components of the <code>hsl()</code> values used to generate the rainbow gradient stay constant, all that changes is the hue.</p>\n<p>For each and every stop, the hue goes from its initial value to its initial value plus <code>360</code>, thus passing through the whole hue scale in the process. This is equivalent to keeping the initial hue constant and varying an offset. This offset <code>--off</code> is the custom property we animate.</p>\n<p>Sadly, this means support is limited to Blink browsers with the <strong>Experimental Web Platform features</strong> flag enabled.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2017/09/scr_chrome_flag_exp_web_platform.png\" alt=\"Screenshot showing the Experimental Web Platform features flag being enabled in Chrome.\"/><figcaption>The Experimental Web Platform features flag enabled in Chrome.</figcaption></figure>\n<p>Still, let\'s see how we put it all into code!</p>\n<p>For starters, we modify the <code>get-stops()</code> function such that the current hue at any time is the initial hue of the current stop <code>$hue-curr</code> plus our offset <code>--off</code>:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$list: $list, hsl(calc(#{$hue-curr} + var(--off, 0)), 85%, 57%);</code></pre>\n<p>Next, we register this custom property:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">CSS.registerProperty({\n  name: \'--off\', \n  syntax: \'&lt;number&gt;\', \n  initialValue: 0;\n})</code></pre>\n<p>And finally, we animate it to <code>360</code>:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.∞ {\n  /* same as before */\n	\n  &amp;:before, &amp;:after {\n    /* same as before */\n    animation: shift 2s linear infinite;\n  }\n}\n\n@keyframes shift { to { --off: 360 } }</code></pre>\n<p>This gives us our animated gradient infinity!</p>\n<figure><video controls src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/infinity_logo_ani.mp4\" loop></video><figcaption>Animated ∞ logo (<a href=\"https://codepen.io/thebabydino/pen/jxJmLV/\">live demo</a>, Blink only with flag enabled).</figcaption></figure>\n<p>That\'s it! I hope you\'ve enjoyed this dive into what can be done with CSS these days!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/1-element-css-rainbow-gradient-infinity/\">1 Element CSS Rainbow Gradient Infinity</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/1-element-css-rainbow-gradient-infinity/',0,427,0,'2018-06-05 14:04:31','2018-06-07 11:51:32','2018-06-07 11:51:29','60cc75770d62e9f04ff71b9b572d1c58','m4I5JxR','\0',NULL),(2338576,36735,'Combining the Powers of SEM and BIO for Improving CSS','<p>CSS is easy, some might argue, but that \"easiness\" can cause messy code. This is especially true through power of preprocessors like Sass or Less where, if you aren’t careful, your CSS can become harder to deal with instead of easier. Sass? Harder? <a href=\"https://gist.github.com/strann/9900620\">This Gist</a> shows a great example of Sass nesting hell.</p>\n<p>If your Sass code looks like that, you can definitely improve your code with <strong>SEM & BIO</strong>, a CSS technique I’ll introduce you to now!</p>\n<p><span id=\"more-271711\"></span></p>\n<p>In this article, I am going to use the code example below to explain how SEM and BIO works and how they can help enhance your CSS strategy.</p>\n<p data-height=\"470\" data-theme-id=\"1\" data-slug-hash=\"3666483a5cccb77462210cc623cee2f8\" data-default-tab=\"result\" data-user=\"iamryanyu\" data-embed-version=\"2\" data-pen-title=\"SEM & BIO\" class=\"codepen\">See the <a href=\"https://codepen.io/iamryanyu/pen/3666483a5cccb77462210cc623cee2f8\">Pen</a> by thebabydino (<a href=\"http://codepen.io/iamryanyu\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>Generally, SEM is concerned with high level CSS philosophy whereas BIO is an actual technique to help you write better CSS to achieve SEM. The main purpose of both SEM and BIO is to better handle the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\">CSS specificity</a> which is one of the most important concepts you should understand for CSS.</p>\n<figure id=\"post-271712\" class=\"align-none media-271712\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-1.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279368/sem-bio-1_voz6aw.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_697,f_auto,q_auto/v1527279368/sem-bio-1_voz6aw.png 697w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279368/sem-bio-1_voz6aw.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Credit: <a href=\"http://nanajeon.com/\">Nana Jeon</a></figcaption></figure>\n<p>First of all, let’s talk about SEM.</p>\n<h3>SEM</h3>\n<p>SEM stands for:</p>\n<ul>\n<li>Scalable</li>\n<li>Extensible</li>\n<li>Maintainable</li>\n</ul>\n<p>Trying to achieve those three factors can definitely improve your CSS code and it helps you build your components much more solid.</p>\n<p>Let\'s talk more about each factor in detail.</p>\n<h4>Scalable</h4>\n<p>A scalable (or reusable) component means that the same looking components should be used wherever you want without making any coding changes.</p>\n<figure id=\"post-271713\" class=\"align-none media-271713\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-2.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279384/sem-bio-2_pans6f.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279384/sem-bio-2_pans6f.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Credit: <a href=\"http://nanajeon.com/\">Nana Jeon</a></figcaption></figure>\n<p>From the CodePen example above, the \"Search\" button in the header looks exactly same as the ‘Link\' button in the sidebar. When we compare the HTML markup,</p>\n<ul>\n<li>the \"Search\" button is <code>&lt;button&gt;</code> element</li>\n<li>but the \"Link\" button is <code>&lt;a role=\"button\" ...&gt;</code> element</li>\n</ul>\n<p>...and even if the markup is different, the styles are identical by using the same classes: <code>.c-btn</code> and <code>.c-btn--yellow</code>.</p>\n<p>The button styles are scalable and it allows you to add the same looking components anywhere you want as it won’t be polluted by its parents or siblings. This can save you from the big headache of not knowing why totally unrelated components are broken even if the changes are made on a different component from a totally different place.</p>\n<figure id=\"post-271714\" class=\"align-none media-271714\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-3.gif\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_480,f_auto,q_auto/v1527279386/sem-bio-3_uux5fd.gif 480w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_418,f_auto,q_auto/v1527279386/sem-bio-3_uux5fd.gif 418w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_336,f_auto,q_auto/v1527279386/sem-bio-3_uux5fd.gif 336w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279386/sem-bio-3_uux5fd.gif 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Source: <a href=\"https://www.cartoonnetwork.com.au/show/we-bare-bears\">Cartoon Network</a></figcaption></figure>\n<h4>Extensible</h4>\n<p>An extensible component can easily provide additional features/functionalities without breaking itself or having to be written from scratch.</p>\n<p>Let’s look at the CodePen example again.</p>\n<p data-height=\"470\" data-theme-id=\"1\" data-slug-hash=\"3666483a5cccb77462210cc623cee2f8\" data-default-tab=\"result\" data-user=\"iamryanyu\" data-embed-version=\"2\" data-pen-title=\"SEM & BIO\" class=\"codepen\">See the <a href=\"https://codepen.io/iamryanyu/pen/3666483a5cccb77462210cc623cee2f8\">Pen</a> by iamryanyu (<a href=\"http://codepen.io/iamryanyu\">@iamryanyu</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>The button in the header and in the main section look quite similar besides the 3D effect. In this case, instead of creating two different sets of buttons having totally different code bases, we could extend the plain button style by just adding the 3D effect to it.</p>\n<p>It goes the same with the button in the footer. Even though the button has a different color and size, we could easily extend it by adding or removing new or different features.</p>\n<figure id=\"post-271715\" class=\"align-none media-271715\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-4.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279408/sem-bio-4_k9sjnw.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279408/sem-bio-4_k9sjnw.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Credit: <a href=\"http://nanajeon.com/\">Nana Jeon</a></figcaption></figure>\n<h4>Maintainable</h4>\n<p>Probably one of the biggest challenges for most front-enders is to understand CSS written by other people, or our past selves. We sometimes spend more time trying to understand the existing code than adding awesomely-written new code.</p>\n<p>The issue usually comes from:</p>\n<ul>\n<li>no comments, whatsoever</li>\n<li>over-engineering</li>\n<li>no single source of truth</li>\n<li>no coding standard/best practice considered</li>\n<li>or all of them above</li>\n</ul>\n<figure id=\"post-271720\" class=\"align-none media-271720\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-5.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279424/sem-bio-5_vot1i7.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279424/sem-bio-5_vot1i7.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Credit: <a href=\"http://nanajeon.com/\">Nana Jeon</a></figcaption></figure>\n<p>With SEM and BIO, we can definitely improve the code and save others (including ourselves!) from messy, unmaintainable code.</p>\n<h3>BIO</h3>\n<p>There are many great techniques out there to improve the way we write CSS, and from my experience, I found the following three techniques that make up the BIO acronym work very well together</p>\n<ul>\n<li>BEM</li>\n<li>ITCSS</li>\n<li>OOCSS</li>\n</ul>\n<figure id=\"post-271721\" class=\"align-none media-271721\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-6.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279426/sem-bio-6_kqujg8.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279426/sem-bio-6_kqujg8.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Credit: <a href=\"http://nanajeon.com/\">Nana Jeon</a></figcaption></figure>\n<p>A lot of developers/engineers already know those famous techniques but I would like to go through each of them and talk about the way I use those techniques.</p>\n<h4>BEM</h4>\n<p><a href=\"http://getbem.com/introduction/\">BEM</a> is very popular methodology and it has been helping us significantly improve the way we think about CSS and Sass/Less.</p>\n<p>BEM stands for:</p>\n<ul>\n<li>Block</li>\n<li>Element</li>\n<li>Modifier</li>\n</ul>\n<figure id=\"post-271716\" class=\"align-none media-271716\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-7.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279411/sem-bio-7_u4fhiw.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279411/sem-bio-7_u4fhiw.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Credit: <a href=\"http://nanajeon.com/\">Nana Jeon</a></figcaption></figure>\n<p>As the bad example above shows, we tend to overuse the power of Sass/Less and falling into nesting-hell. But with BEM, we start to have a very low CSS specificity by maintaining the styles in one (or two) levels of nesting.</p>\n<p>If you’ve experienced any battles fighting higher CSS specificity, you will know how painful it is to come out a winner.</p>\n<p>Going back to our example, the HTML markup looks like this:</p>\n<pre rel=\"HTML\"><code class=\"language-markup\">&lt;div class=\"o-grid\"&gt;\n  &lt;div class=\"o-grid__item o-grid__header\"&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div class=\"o-grid__item o-grid__main\"&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div class=\"o-grid__item o-grid__sidebar\"&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div class=\"o-grid__item o-grid__footer\"&gt;\n    ...\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>The example consists of:</p>\n<ul>\n<li>a block:  <code>.o-grid</code></li>\n<li>elements: <code>.o-grid__item</code>, <code>.o-grid__header</code>, <code>.o-grid__main</code>, <code>.o-grid__sidebar</code>, <code>.o-grid__footer</code></li>\n</ul>\n<p>Because BEM provides a naming convention that stresses unique classes, we don’t have to go into deep nesting like:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.o-grid {\n  .o-grid__item {\n    ...\n  }\n}</code></pre>\n<p>Instead, we can define the styles it with fewer levels:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.o-grid__item {\n  ...\n}</code></pre>\n<p>This is the biggest merit of BEM; lowering the CSS specificity which improves the whole CSS coding efficiency and experience.</p>\n<p>One issue I still see occasionally even with BEM is poor naming. If you don’t pay enough attention, you can wind up with a really long class nam like:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">/* Yikes! */\n.o-grid__item-search-button-text-svg-icon {\n  ...\n}</code></pre>\n<p>When you create a class name, go with the core concept of BEM: your component is a block and all elements inside are individually attached to the block.</p>\n<p>From our example again, I named <code>.o-grid__form</code> instead of <code>.o-grid__item-form</code> because the form itself is a separate component and doesn’t have to be tied with and be a child of <code>o-grid__item</code>.</p>\n<p>Also, to more efficiently control styles, I have added another class name <code>o-grid__header</code> along with <code>o-grid__item</code> to extend the styles. Moreover, the button contains BEM-styled classes with the approach of OOCSS, which we’ll touch on next.</p>\n<h4>OOCSS</h4>\n<p>As we have already discussed, there are many great CSS methodologies and strategies helping us improve the way we write CSS. However, I see a lot of folks forcing themselves to decide on one methodology to use out of the bunch.</p>\n<p>From my experience, combining methodologies can actually enhance their benefits by combining the best of multiple worlds. For example, I personally have found that BEM and OOCSS work very well together.</p>\n<p><a href=\"http://oocss.org/\">OOCSS</a> stands for <strong>Object Oriented CSS</strong> and you can think of it working like Lego blocks:</p>\n<figure id=\"post-271717\" class=\"align-none media-271717\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-8.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_640,f_auto,q_auto/v1527279412/sem-bio-8_wuonrt.jpg 640w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_606,f_auto,q_auto/v1527279412/sem-bio-8_wuonrt.jpg 606w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_412,f_auto,q_auto/v1527279412/sem-bio-8_wuonrt.jpg 412w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279412/sem-bio-8_wuonrt.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /><figcaption>Source: <a href=\"https://www.flickr.com/photos/ochre_jelly/32430277156\">Flickr</a></figcaption></figure>\n<p>OOCSS creates each individual part separately and then constructs them together in order to build components.</p>\n<p>From our example, I have created buttons using the OOCSS naming convention:</p>\n<ul>\n<li><code>.c-btn</code></li>\n<li><code>.c-btn--yellow</code></li>\n<li><code>.c-btn--blue</code></li>\n<li><code>.c-btn--3d</code></li>\n<li><code>.c-btn--large</code></li>\n</ul>\n<p>To render the yellow search button in our example header, we combine these classes:</p>\n<ul>\n<li><code>.c-btn</code></li>\n<li><code>.c-btn--yellow</code></li>\n</ul>\n<p>If we want to have the 3D button in the main section, we add in the 3D class, <code>.c-btn--3d</code> and call it a day.</p>\n<p>And for the blue button in the footer, we can switch the yellow modifier to blue along with the large modifier. As you can see, the button is not depending on the header block giving us greater flexibility with how we use and repurpose components. And, by doing so, we can construct the buttons without impacting any other components or patterns while gaining the benefit of easily extending new presentational feature, like alternative colors and shapes.</p>\n<p>Here example of a button collection created using OOCSS to create the variations: </p>\n<p data-height=\"410\" data-theme-id=\"1\" data-slug-hash=\"RNjRZz\" data-default-tab=\"result\" data-user=\"iamryanyu\" data-embed-version=\"2\" data-pen-title=\"Modern Button Collection\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/iamryanyu/pen/RNjRZz/\">Modern Button Collection</a> by Ryan Yu (<a href=\"https://codepen.io/iamryanyu\">@iamryanyu</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<figure id=\"post-271718\" class=\"align-none media-271718\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-9.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279417/sem-bio-9_uagacx.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279417/sem-bio-9_uagacx.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>On top of BEM and OOCSS, with the help of ITCSS, we can further improve our CSS strategy. Let’s look at that method next.</p>\n<h4>ITCSS</h4>\n<p><a href=\"https://www.youtube.com/watch?v=hz76JIU_xB0\">ITCSS</a> stands for <strong>Inverted Triangle CSS</strong> and it helps organize CSS by applying a structure that determines how specific to get with a specific component. Lubos Kmetko has written <a href=\"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/\">an excellent overview of ITCSS</a> that is worth reading.</p>\n<p>You can see how I have put ITCSS to use by splitting styles up by grouped levels of specificity in <a href=\"https://gist.github.com/iamryanyu/3bf1a3c4d23cbe4e407c1dd95358d9b6\">this Gist</a>.</p>\n<p>Based on that example, you can see how I named <strong>components</strong> by adding a namespace to the class. So, for example, a the \"button\" component is prefixed with a \"c\" (<code>.c-button</code>) to indicate the component status and prevent it from being mistaken for another item. By doing so, everyone working on the project knows the function of that specific class and how changing its properties might affect other areas.</p>\n<p>Here’s a visual that illustrates all the ITCSS levels:</p>\n<figure id=\"post-271719\" class=\"align-none media-271719\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sem-bio-10.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527279421/sem-bio-10_mezys7.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527279421/sem-bio-10_mezys7.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>Let’s go through each section.</p>\n<h5>Settings</h5>\n<p>Settings are generally a collection of variables that do not generate CSS, but are applied to classes. Some examples include:</p>\n<ul>\n<li>Base</li>\n<li>Color</li>\n<li>Typography</li>\n<li>Animation</li>\n</ul>\n<h5>Tools</h5>\n<p>Tools also will not produce any CSS yet and are typically preprocessor functions that help write or extend properties on classes:</p>\n<ul>\n<li>Functions</li>\n<li>Placeholders</li>\n<li>Mixins</li>\n<li>Media queries</li>\n</ul>\n<h5>Vendors</h5>\n<p>Vendors are third-party styles that are being used on a project. Think of things like reset.css, normalize.css, or even Foundation and Bootstrap.</p>\n<p>The reason these styles are higher up in the structure is so we can override them if needed. As you may recall, if the same class is called twice, the cascade will render the properties of the second instance, assuming the properties are exactly the same:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.btn--large {\n  padding: 3em;\n}\n\n/* This one wins out */\n.btn--large {\n  padding: 5em;\n}</code></pre>\n<p>Just for the side note, in Sass, you can use  <code>~</code> to point to the <code>node_modules</code> folder so you are able to import style assets from the source rather than having to move it into your own directories.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@import \'~modern-normalize/modern-normalize\';</code></pre>\n<h5>Objects</h5>\n<p>Objects (namespace: <code>o-</code>) are used for design patterns, such as layouts, where items are being arranged rather than decorated. Object classes are used across all pages, so if you make any changes to the object classes, you should be very careful because any changes are going to affect each and every page throughout the website.</p>\n<p>The most common object classes I use are:</p>\n<ul>\n<li><code>.o-page</code>: the most outer container which usually contains <code>max-width: 100vw</code> and <code>overflow: hidden</code>.</li>\n<li><code>.o-main</code>: the outer container for the main area.</li>\n<li><code>.o-container</code>: the outer container for components and it usually provides a fixed width.</li>\n<li><code>.o-content</code>: in case if any extra configuration is needed for the actual content area.</li>\n<li><code>.o-grid</code>: if a grid layout with different number of columns are required.</li>\n</ul>\n<p>Do you use any other object classes? If so, please share with me. &#x1f603;</p>\n<h5>Elements</h5>\n<p>Elements (namespace: <code>e-</code>) are the HTML native elements which we would not style based on the class names. For example, we should provide default styles to <code>&lt;a&gt;</code> element rather than <code>.link</code> class.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">// Do this for the default link style\na {\n  text-decoration: none;\n\n  &amp;:hover {\n    background-color: blue;\n    color: white;\n  }\n}\n\n// Don’t provide the default link style to a class\n.link {\n  text-decoration: none;\n\n  &amp;:hover {\n    background-color: blue;\n    color: white;\n  }\n}</code></pre>\n<p>It is because, especially in a CMS like WordPress, you wouldn’t want to add a class every single time you want to use a link in content. Hence, we provide a default style to the <code>&lt;a&gt;</code> element so without any class, the link will still have good-looking styles.</p>\n<h5>Components</h5>\n<p>A component (namespace: <code>c-</code>) is a small feature that makes up a part of the website. Think buttons, accordions, sliders, modal dialogs, etc. Each component is fully functional by itself and does not rely on any other components. This fact should be considered when you name the component.</p>\n<p>For example, the button in the main section from the example above shouldn’t be called <code>.c-main-button</code> because main scopes it inside the <code>main</code> section and limits the use of it in other places, like a sidebar. Something like <code>.c-btn</code> is much nicer because the button is no longer tied to any other specific sections of the page.</p>\n<p>If you need any extra features, you can always extend properties with a BEM modifier (combining powers!) or use <strong>Scope</strong>, which is coming up in a bit.</p>\n<h5>Patterns</h5>\n<p>A lot of developers/engineers use the terms <em>component</em> and <em>pattern</em> synonymously and that’s totally fine if you are more comfortable with that. It is just my preference to separate those two terms.</p>\n<p>For a general rule of thumb, I think of a pattern (namespace: <code>p-</code>) as a combination of components but in a way that is <strong>not</strong> scaleable.</p>\n<p>For example, I would consider the accordion as a component. It is scaleable and reusable on its own, meaning that it can be used in other parts of the website without making any changes even if the accordion would contain other components such as buttons. </p>\n<p>On the other hand, the header, for example, would be a pattern because it is <strong>not</strong> scaleable (the header cannot be used in the content or sidebar area) and also contains other components such as buttons, accordions, menus, logos, search form etc.</p>\n<h5>Scope</h5>\n<p>Be warned; I <em>only</em> use the scope if it’s absolutely necessary. The purpose of the scope (namespace: <code>s-</code>) is to give us the highest specificity so we can overwrite any styles for a specific purpose.</p>\n<p>Remember, If you find yourself using the <em>scope class</em> many times, you might be writing styles that are <em>too</em> specific and you should consider refactor your CSS structure.</p>\n<p>Here is a simple example of the use of the scope class, <code>.s-home</code>.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.c-accordion {\n  .s-home &amp; {\n    // Changing the background color specically on the homepage\n    background-color: tomato;\n  }\n}</code></pre>\n<p>As a side note, the above example could actually be refactored by providing a modifier to the accordion (e.g., <code>.c-accordion--bg-tomato</code>) instead of using the scope class. That would be a much more extensible way of writing and make the component more modular.</p>\n<h5>Utility</h5>\n<p>Sometimes you may want to make changes only for a certain style in a specific place. In that case, utility (namespace: <code>u-</code>) classes can help us update it without changing the whole CSS structure.	 	 </p>\n<p>For example, the font-size of the accordion heading is set to 32px.	 	 </p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.c-accordion__heading {	 	 \n  font-size: rem(32);	 	 \n}</code></pre>\n<p>But if the font size is only different in the news section of your site and does not change anywhere else, then you might want to apply the utility class instead of setting higher specificity with the parent class or scope class.</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;button aria-expanded=\"false\" class=\"c-accordion__heading u-font-size--24\" aria-controls=\"sect1\" id=\"accordion1id\" type=\"button\"&gt;...&lt;/button&gt;</code></pre>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.u-font-size--24 {	 	 \n  font-size: rem(24) !important;	 	 \n}</code></pre>\n<p class=\"explanation\">Please note that we all know <code>!important</code> is BAD but I added <code>!important</code> to the value. It is because when we use the utility class, we are absolutely sure we want the specific style to be updated as we want. Also the utility class should overwrite any other styles, so having the <code>!important</code> actually works well here for the utility classes. That said, the utility classes should only play a role as a helper. It should never be used for structuring your CSS.</p>\n<p>Like scope classes, if you are using too many utility classes, you should check with designer if the design can be more consistent across the site.</p>\n<h5>Extra Namespace</h5>\n<p>On top of the namespaces we discussed above, there are two more I often use:</p>\n<ul>\n<li><code>is-</code>: this indicates the state of the block or element. Most commonly used class is <code>.is-active</code>, like the active link in navigation.</li>\n<li><code>js-</code>: this indicates that the specific element is bound to JavaScript events. For example, <code>js-menu-click</code> indicates that the element is bound to the click event.</li>\n</ul>\n<h4>Linting</h4>\n<p>Finally making rules with <code>.stylelint</code> and <code>.eslint</code> can significantly improve the code quality.</p>\n<p>In the frontend workflow, I don’t make it as a recommendation; I make it mandatory so that failing of the rules won’t get approved.</p>\n<p>In this way, we can ensure that the coding quality stays at its best and provide better code to other developers, including your future self.</p>\n<h3>In Action</h3>\n<p>In this section, I’d like to discuss how we could use SEM and BIO. I have made a simple, practical example to get us started:</p>\n<p data-height=\"470\" data-theme-id=\"1\" data-slug-hash=\"fea46688b060099de1af29b8c9c1319e\" data-default-tab=\"result\" data-user=\"iamryanyu\" data-embed-version=\"2\" data-pen-title=\"SEM & BIO\" class=\"codepen\">See the <a href=\"https://codepen.io/iamryanyu/pen/fea46688b060099de1af29b8c9c1319e\">Pen</a> by iamryanyu (<a href=\"http://codepen.io/iamryanyu\">@iamryanyu</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>The main practice with the example is to build an accordion that can be used as:</p>\n<ul>\n<li>a normal accordion but with different color themes in the main section</li>\n<li>a menu in the sidebar</li>\n<li>a block displaying social media icons in the footer</li>\n</ul>\n<p>What we’re achieving is a component that is:</p>\n<ul>\n<li><strong>Scalable</strong>: as it can be added in any part of the page without any coding changes</li>\n<li><strong>Extensible</strong>: as it can serve different functionalities with the core functions unchanged</li>\n<li><strong>Maintainable</strong>: as it is organized in a way that makes sense</li>\n</ul>\n<p>To achieve SEM, BIO has been used including:</p>\n<ul>\n<li><strong>BEM:</strong> <code>.c-accordion</code> as a block and its children as elements, also used modifiers, e.g., <code>.c-accordion--light</code> and <code>.c-accordion--dark</code></li>\n<li><strong>ITCSS:</strong> The ordering/sorting of SASS files handles the CSS specificity quite well. For example, the accordion button in the sidebar contains <code>class=\"c-accordion__trigger p-sidebar-menu__button\"</code> which the pattern (<code>p-</code>) overwrites the component (<code>c-</code>) with no issues.</li>\n<li><strong>OOCSS:</strong> the accordion is constructed with several classes, for example, <code>class=\"c-accordion c-accordion--dark c-accordion--single\"</code> which creates a dark theme with opening a single panel only each time.</li>\n</ul>\n<h3>Final thoughts</h3>\n<p>I have used this approach for almost all of my projects including universities, government departments, commercial retailers, and many other websites. In each case, I have successfully delivered all of the projects to the clients (almost no issues during the client approval stage and delivered on time); this approach has worked for me very well so far and I think it could for you as well.</p>\n<p>That being said, technologies always change (especially on the front end) and I am more than happy to hear and discuss any of your ideas/approaches/strategies that worked for you. Let me know in the comments!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/combining-the-powers-of-sem-and-bio-for-improving-css/\">Combining the Powers of SEM and BIO for Improving CSS</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/combining-the-powers-of-sem-and-bio-for-improving-css/',0,127,0,'2018-06-04 14:07:15','2018-06-07 11:51:36','2018-06-07 11:51:32','389ce6c5046a4fbc5706e587791eecdf','Sa4z7BY','\0',NULL),(2338577,36735,'HSL() / HSLa() is great for programmatic color control','<p>If you ever need to hand-manipulate a color in native CSS, HSL is pretty much the only way. HSL (the <code>hsl()</code> and <code>hsla()</code> functions in CSS) stands for hue, saturation, lightness, and optionally, alpha. <a href=\"https://css-tricks.com/yay-for-hsla/\">We\'ve talked about it</a> before but we can break it down a little more and do some interesting things with it.</p>\n<p><span id=\"more-270720\"></span></p>\n<ul>\n<li><strong>Hue:</strong> Think of a color wheel. Around 0<sup>o</sup> and 360<sup>o</sup> are reds. 120<sup>o</sup> is where greens are and 240<sup>o</sup> are blues. Use anything in between 0-360. Values above and below will be modulus 360.</li>\n<li><strong>Saturation:</strong> 0% is completely desaturated (grayscale). 100% is fully saturated (full color).</li>\n<li><strong>Lightness:</strong> 0% is completely dark (black). 100% is completely light (white). 50% is average lightness.</li>\n<li><strong>alpha:</strong> Opacity/Transparency value. 0 is fully transparent. 1 is fully opaque. 0.5 is 50% transparent.</li>\n</ul>\n<p>You can hand-manipulate any of those four values and have a decent sense of what is going to happen. Change the hue to take a trip around the color wheel. Change the saturation to get deeper or more muted colors. Change the lightness to essentially mix in black or white. </p>\n<p>You might have some mental chops with <code>rgb()</code>, knowing that <code>rgb(255, 0, 0)</code> is clearly red or <code>rgb(0, 0, 0)</code> is black, but manipulating those to get to a light purple or starting with a forest green and getting a little lighter isn\'t exactly mental math. You might even be the clever sort who can identify color by Hex codes. Ask <a href=\"https://desandro.com/\">David DeSandro</a> at a party sometime. Still, nothing nearly as intuitive as HSL. </p>\n<p>Those of you on the cutting edge might recall <a href=\"https://css-tricks.com/colorme-css-color-level-4/\">the working draft of Color Level 4</a> with the <code>color()</code> function and more intuitive sub-functions. Or, you might get hot and heavy with <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">Sass color functions</a> or your own <a href=\"https://css-tricks.com/snippets/sass/tint-shade-functions/\">home brew</a> thing. More power to ya! </p>\n<p data-height=\"320\" data-theme-id=\"1\" data-slug-hash=\"PawaqP\" data-default-tab=\"css,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Sass Color Functions\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/chriscoyier/pen/PawaqP/\">Sass Color Functions</a> by Chris Coyier  (<a href=\"https://codepen.io/chriscoyier\">@chriscoyier</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p>I really like HSL when playing with color in JavaScript. For example, say you want to generate some different red tones. You could randomize the H, S, and L tightly around some values:</p>\n<p data-height=\"449\" data-theme-id=\"1\" data-slug-hash=\"ERaLob\" data-default-tab=\"js,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Random Reds\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/chriscoyier/pen/ERaLob/\">Random Reds</a> by Chris Coyier  (<a href=\"https://codepen.io/chriscoyier\">@chriscoyier</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p>Not long ago, I basically did the same thing but rotated the hue to animate this stargate:</p>\n<p data-height=\"498\" data-theme-id=\"1\" data-slug-hash=\"ddrYyN\" data-default-tab=\"js,result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"Sparklegate\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/chriscoyier/pen/ddrYyN/\">Sparklegate</a> by Chris Coyier  (<a href=\"https://codepen.io/chriscoyier\">@chriscoyier</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p class=\"explanation\">If you\'re messing with color in JavaScript and want randomization to result in pleasing colors, give <a href=\"https://github.com/Fooidge/PleaseJS\">PleaseJS</a> a spin.</p>\n<p>Need a quick color picker? I put this one together ages ago and I quickly ported it over to CodePen:</p>\n<p data-height=\"687\" data-theme-id=\"1\" data-slug-hash=\"YvPLRg\" data-default-tab=\"result\" data-user=\"chriscoyier\" data-embed-version=\"2\" data-pen-title=\"HSL Explorer\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/chriscoyier/pen/YvPLRg/\">HSL Explorer</a> by Chris Coyier  (<a href=\"https://codepen.io/chriscoyier\">@chriscoyier</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p>There is also the <a href=\"http://hslpicker.com/\">HSL Color Picker</a> and <a href=\"http://mothereffinghsl.com/\">Mothereffering HSL</a> if you want options.</p>\n<p data-height=\"692\" data-theme-id=\"1\" data-slug-hash=\"gItif\" data-default-tab=\"result\" data-user=\"gpyne\" data-embed-version=\"2\" data-pen-title=\"HSL\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/gpyne/pen/gItif/\">HSL</a> by Graham Pyne (<a href=\"https://codepen.io/gpyne\">@gpyne</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p class=\"explanation\">Wanna learn more about color on the web in general? Don\'t miss Sarah Drasner\'s <a href=\"https://css-tricks.com/nerds-guide-color-web/\">A Nerd’s Guide to Color on the Web</a>. Lots of great goodies in there to up your understanding of working with color.</p>\n<p data-height=\"439\" data-theme-id=\"1\" data-slug-hash=\"BpbYmZ\" data-default-tab=\"js,result\" data-user=\"danwilson\" data-embed-version=\"2\" data-pen-title=\"HSL\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/danwilson/pen/BpbYmZ/\">HSL</a> by Dan Wilson (<a href=\"https://codepen.io/danwilson\">@danwilson</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/hsl-hsla-is-great-for-programmatic-color-control/\">HSL() / HSLa() is great for programmatic color control</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/hsl-hsla-is-great-for-programmatic-color-control/',0,86,0,'2018-06-01 21:51:04','2018-06-07 11:51:39','2018-06-07 11:51:36','e559032e9c0e0ab33508e94de4554ba6','Bh67ZwX','\0',NULL),(2338578,36735,'The State of Changing Gradients with CSS Transitions and Animations','<p>Back in 2012, Internet Explorer 10 came out and, among other things, it finally supported CSS gradients and, in addition to that, the ability to animate them with just CSS! No other browser supported this at the time, but I was hopeful for the future.</p>\n<p>Sadly, six years have passed and nothing has changed in this department. Edge supports animating gradients with CSS, just like IE 10 did back then, but no other browser has added support for this. And while animating <code>background-size</code> or <code>background-position</code> or the <code>opacity</code> or rotation of a pseudo element layered on top <a href=\"https://codepen.io/thebabydino/pen/Ebnsx\">can take us a long way</a> in terms of achieving cool effects, these workarounds are still limited.</p>\n<p><span id=\"more-271227\"></span></p>\n<p>There are effects we cannot reproduce without adding lots of extra elements or lots of extra gradients, such as \"the blinds effect\" seen below.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/blinds_basic.gif\" alt=\"Animated GIF showing a recording of the opening and closing blinds effect. When the blinds are closed, we only see a grey background, when the blinds start to open, we start seeing vertical orange strips (the light coming in) that grow horizontally until the blinds are fully open, so we only see an orange background. After that, the blinds start to close, so the vertical orange strips start getting narrower until they\'re reduced to nothing when the blinds are fully closed and we only see a grey background again. The whole cycle then repeats itself.\"/><figcaption>The blinds effect (<a href=\"https://codepen.io/thebabydino/pen/GddRWq\">live demo</a>, Edge/ IE 10+ only).</figcaption></figure>\n<p>In Edge, getting the above effect is achieved with <a href=\"https://codepen.io/thebabydino/pen/GddRWq\">a keyframe <code>animation</code></a>:</p>\n<pre rel=\"CSS\"><code class=\"language-css\">html {\n  background: linear-gradient(90deg, #f90 0%, #444 0) 50%/ 5em;\n  animation: blinds 1s ease-in-out infinite alternate;\n}\n\n@keyframes blinds {\n  to {\n    background-image: linear-gradient(90deg, #f90 100%, #444 0);\n  }\n}</code></pre>\n<p>If that seems <a href=\"https://twitter.com/g16n/status/647717260837171200\">WET</a>, we can <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a> it up with <a href=\"https://codepen.io/thebabydino/pen/oddNwv\">a touch of Sass</a>:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@function blinds($open: 0) {\n  @return linear-gradient(90deg, #f90 $open*100%, #444 0);\n}\n\nhtml {\n  background: blinds() 50%/ 5em;\n  animation: blinds 1s ease-in-out infinite alternate;\n}\n\n@keyframes blinds { to { background-image: blinds(1) } }</code></pre>\n<p>While we\'ve made the code we write and what we\'ll need to edit later a lot more maintainable, we still have repetition in the compiled CSS and we\'re limited by the fact that we can only animate between stops with the same unit &mdash; while animating from <code>0%</code> to <code>100%</code> works just fine, trying to use <code>0</code> or <code>0px</code> instead of <code>0%</code> results in no animation happening anymore. Not to mention that Chrome and Firefox just flip from orange to grey with no stop position <code>animation</code> at all!</p>\n<p>Fortunately, these days we have an even better option: CSS variables!</p>\n<p>Right out of the box, CSS variables are not animatable, though we can get <code>transition</code> (but not <code>animation</code>!) effects <em>if the property we use them for is animatable</em>. For example, when used inside a <code>transform</code> function, we can <code>transition</code> the <code>transform</code> the property.</p>\n<p>Let\'s consider the example of a box that gets shifted and squished when a checkbox is checked. On this box, we set a <code>transform</code> that depends on a factor <code>--f</code> which is initially <code>1</code>:</p>\n<pre rel=\"CSS\"><code class=\"language-css\">.box {\n  /* basic styles like dimensions and background */\n  --f: 1;\n  transform: translate(calc((1 - var(--f))*100vw)) scalex(var(--f));\n}</code></pre>\n<p>When the checkbox is <code>:checked</code>, we change the value of the CSS variable <code>--f</code> to <code>.5</code>:</p>\n<pre rel=\"CSS\"><code class=\"language-css\">:checked ~ .box { --f: .5 }</code></pre>\n<p>Setting a <code>transition</code> on the <code>.box</code> makes it go smoothly from one state to the other:</p>\n<pre rel=\"CSS\"><code class=\"language-css\">.box {\n  /* same styles as before */\n  transition: transform .3s ease-in;\n}</code></pre>\n<p class=\"explanation\">Note that this doesn\'t really work in the current version of Edge due to <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16320322/\">this bug</a>.</p>\n<p data-height=\"241\" data-theme-id=\"1\" data-slug-hash=\"VxxYdr\" data-default-tab=\"result\" data-user=\"thebabydino\" data-embed-version=\"2\" data-pen-title=\"CSS variables + transitions (for animatable properties like transform)\" class=\"codepen\">See the <a href=\"http://codepen.io/thebabydino/pen/VxxYdr/\">Pen</a> by thebabydino (<a href=\"http://codepen.io/thebabydino\">@thebabydino</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<p>However, CSS gradients are background images, which are only animatable in Edge and IE 10+. So, while we can make things easier for ourselves and reduce the amount of generated CSS for transitions (as seen in the code below), we\'re still not making progress in terms of extending support.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">.blinds {\n  background: linear-gradient(90deg, #f90 var(--pos, 0%), #444 0) 50%/ 5em;\n  transition: .3s ease-in-out;\n	\n  :checked ~ &amp; { --pos: 100%; }\n}</code></pre>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/blinds_transition.gif\" alt=\"Animated gif. The blinds opening effect happens on checking an \'open blinds\' checkbox, while unchecking it triggers the closing effect.\"/><figcaption>Open/close blinds on checking/unchecking the checkbox (<a href=\"https://codepen.io/thebabydino/pen/zjjGjR\">live demo</a>, Edge only).</figcaption></figure>\n<p>Enter Houdini, which allows us to register custom properties and then animate them. Currently, this is only supported by Blink browsers behind the <strong>Experimental Web Platform features</strong> flag, but it\'s still extending support a bit from Edge alone.</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2017/09/scr_chrome_flag_exp_web_platform.png\" alt=\"Screenshot showing the Experimental Web Platform features flag being enabled in Chrome.\"/><figcaption>The Experimental Web Platform features flag enabled in Chrome.</figcaption></figure>\n<p>Going back to our example, we register the <code>--pos</code> custom property:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">CSS.registerProperty({\n  name: \'--pos\', \n  syntax: \'&lt;length-percentage&gt;\', \n  initialValue: \'0%\'\n});</code></pre>\n<p class=\"explanation\">Note that <code>&lt;length-percentage&gt;</code> means it accepts not only length and percentage values, but also <code>calc()</code> combinations of them. By contrast, <code>&lt;length&gt; | &lt;percentage&gt;</code> only accepts length and percentage values, but not <code>calc()</code> combinations of them.</p>\n<p>However, <a href=\"https://codepen.io/thebabydino/pen/XqqbQq\">doing this</a> doesn\'t make any difference in Chrome, even with the flag enabled, probably because, in the case of transitions, what\'s being transitioned is the property whose value depends on the CSS variable and not the CSS variable itself. And since we generally can\'t transition between two background images in Chrome in general, this fails as well.</p>\n<p>It does work in Edge, but it worked in Edge even without registering the <code>--pos</code> variable because Edge allows us to transition between gradients in general.</p>\n<p>What <a href=\"https://codepen.io/thebabydino/pen/gzzWKV\">does work</a> in Blink browsers with the flag enabled is having an <code>animation</code> instead of a <code>transition</code>.</p>\n<pre rel=\"CSS\"><code class=\"language-css\">html {\n  background: linear-gradient(90deg, #f90 var(--pos, 0%), #444 0) 50%/ 5em;\n  animation: blinds .85s ease-in-out infinite alternate;\n}\n\n@keyframes blinds { to { --pos: 100%; } }</code></pre>\n<p>However, this is now not working in Edge anymore because, while Edge can animate between gradient backgrounds, it cannot do the same for custom properties.</p>\n<p>So we need to take an <a href=\"https://codepen.io/thebabydino/pen/oddJrG/\">alternative approach</a> for Edge here. This is where <code>@supports</code> comes in handy, since all we have to do is check whether a <code>-ms-</code> prefixed property is supported.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@function grad($pos: 100%) {\n  @return linear-gradient(90deg, #f90 $pos, #444 0);\n}\n\nhtml{\n  /* same as before */\n	\n  @supports (-ms-user-select: none) {\n    background-image: grad(0%);\n    animation-name: blinds-alt;\n  }\n}\n\n@keyframes blinds-alt { to { background-image: grad() } }</code></pre>\n<p>Stop positions aren\'t the only thing we can animate this way. We can do the same thing for the gradient angle. The idea behind it is pretty much the same, except now our <code>animation</code> isn\'t an alternating one anymore and we use an <a href=\"https://easings.net/#easeInOutBack\"><code>easeInOutBack</code></a> kind of timing function.</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">@function grad($ang: 1turn) {\n  @return linear-gradient($ang, #f90 50%, #444 0);\n}\n\nhtml {\n  background: grad(var(--ang, 0deg));\n  animation: rot 2s cubic-bezier(.68, -.57, .26, 1.65) infinite;\n  \n  @supports (-ms-user-select: none) {\n    background-image: grad(0turn);\n    animation-name: rot-alt;\n  }\n}\n\n@keyframes rot { to { --ang: 1turn; } }\n\n@keyframes rot-alt { to { background-image: grad(); } }</code></pre>\n<p class=\"explanation\">Remember that, just like in the case of stop positions, we can only animate between gradient angles expressed in the same unit in Edge, so calling our Sass function with <code>grad(0deg)</code> instead of <code>grad(0turn)</code> doesn\'t work.</p>\n<p>And, of course, the CSS variable we now use accepts angle values instead of lengths and percentages:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">CSS.registerProperty({\n  name: \'--ang\', \n  syntax: \'&lt;angle&gt;\', \n  initialValue: \'0deg\'\n});</code></pre>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sweep_rot.gif\" alt=\"Animated gif. Shows a top to bottom gradient with an abrupt change from grey to orange at 50%. The angle of this gradient is animated using a easeInOutBack timing function (which overshoots the end values at both ends).\"/><figcaption>Sweeping around (<a href=\"https://codepen.io/thebabydino/pen/BxxMzE\">live demo</a>, Blink browsers with flag and Edge only).</figcaption></figure>\n<p>In a similar fashion, we can also animate radial gradients. And the really cool thing about the CSS variable approach is that it allows us to animate different components of the gradient differently, which is something that\'s not possible when animating gradients as a whole the way Edge does (which is why the following demos don\'t work as well in Edge).</p>\n<p>Let\'s say we have the following <code>radial-gradient()</code>:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$p: 9%;\n\nhtml {\n  --x: #{$p};\n  --y: #{$p};\n  background: radial-gradient(circle at var(--x) var(--y), #f90, #444 $p);\n}</code></pre>\n<p>We register the <code>--x</code> and <code>--y</code> variables:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">CSS.registerProperty({\n  name: \'--x\', \n  syntax: \'&lt;length-percentage&gt;\', \n  initialValue: \'0%\'\n});\n\nCSS.registerProperty({\n  name: \'--y\', \n  syntax: \'&lt;length-percentage&gt;\', \n  initialValue: \'0%\'\n});</code></pre>\n<p>Then we add the animations:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">html {\n  /* same as before */\n  animation: a 0s ease-in-out -2.3s alternate infinite;\n  animation-name: x, y;\n  animation-duration: 4.1s, 2.9s;\n}\n\n@keyframes x { to { --x: #{100% - $p} } }\n@keyframes y { to { --y: #{100% - $p} } }</code></pre>\n<p>The result we get can be seen below:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/mov_glow.gif\" alt=\"Animated GIF. Shows a moving glowing orange light on a grey background. This is achieved by animating the coordinates of the central point of a radial gradient independently with the help of CSS variables and Houdini.\"/><figcaption>Moving light (<a href=\"https://codepen.io/thebabydino/pen/BxxMwg\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>We can use this technique of animating the different custom properties we use inside the gradient function to make the blinds in our initial example close the other way instead of going back. In order to do this, we introduce two more CSS variables, <code>--c0</code> and <code>--c1</code>:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$c: #f90 #444;\n\nhtml {\n  --c0: #{nth($c, 1)};\n  --c1: #{nth($c, 2)};\n  background: linear-gradient(90deg, var(--c0) var(--pos, 0%), var(--c1) 0) 50%/ 5em;\n}</code></pre>\n<p>We register all these custom properties:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">CSS.registerProperty({\n  name: \'--pos\', \n  syntax: \'&lt;length-percentage&gt;\', \n  initialValue: \'0%\'\n});\n\nCSS.registerProperty({\n  name: \'--c0\', \n  syntax: \'&lt;color&gt;\', \n  initialValue: \'red\'\n});\n\n/* same for --c1 */</code></pre>\n<p>We use the same animation as before for the position of the first stop <code>--pos</code> and, in addition to this, we introduce two <code>steps()</code> animations for the other two variables, switching their values every time an iteration of the first <code>animation</code> (the one changing the value of <code>--pos</code>) is completed:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$t: 1s;\n\nhtml {\n  /* same as before */\n  animation: a 0s infinite;\n  animation-name: c0, pos, c1;\n  animation-duration: 2*$t, $t;\n  animation-timing-function: steps(1), ease-in-out;\n}\n\n@keyframes pos { to { --pos: 100%; } }\n\n@keyframes c0 { 50% { --c0: #{nth($c, 2)} } }\n@keyframes c1 { 50% { --c1: #{nth($c, 1)} } }</code></pre>\n<p>And we get the following result:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/blinds_reverse.gif\" alt=\"Animated GIF. Shows the blinds effect with the blinds closing the other way. Once the vertical orange strips (openings) have expanded horizontally such that they cover the whole background, they don\'t start contracting again. Instead, vertical grey orange strips start expanding from nothing until they cover the whole background.\"/><figcaption>Another version of the blinds animation (<a href=\"https://codepen.io/thebabydino/pen/errxxE\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>We can also apply this to a <code>radial-gradient()</code> (nothing but the <code>background</code> declaration changes):</p>\n<pre rel=\"CSS\"><code class=\"language-css\">background: radial-gradient(circle, var(--c0) var(--pos, 0%), var(--c1) 0);</code></pre>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sweep_grow.gif\" alt=\"Animated gif. We start with a grey background and we have an orange disc growing from nothing in the middle until it covers everything. Then we have a grey disc growing from nothing in the middle until it covers the entire background and we\'re back where we started from: a grey background.\"/><figcaption>Growing discs (<a href=\"https://codepen.io/thebabydino/pen/pVVYKL\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>The exact same tactic works for <code>conic-gradient()</code> as well:</p>\n<pre rel=\"CSS\"><code class=\"language-css\">background: conic-gradient(var(--c0) var(--pos, 0%), var(--c1) 0);</code></pre>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sweep_fill.gif\" alt=\"Animated gif. We start with a grey background and we have an orange pie slice (circular sector) growing from nothing to covering everything around the central point. Then we have a grey pie slice growing from nothing to covering everything around the central point and we\'re back where we started from: a grey background.\"/><figcaption>Growing slices (<a href=\"https://codepen.io/thebabydino/pen/bMMJWK\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>Repeating gradients are also an option creating a ripple-like effect in the radial case:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$p: 2em;\n\nhtml {\n  /* same as before */\n  background: repeating-radial-gradient(circle, \n    var(--c0) 0 var(--pos, 0px), var(--c1) 0 $p);\n}\n\n@keyframes pos { 90%, 100% { --pos: #{$p} } }</code></pre>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sweep_rip.gif\" alt=\"Animated gif. We start with a grey background and we have concentric orange circles growing outwards from really thin until they meet and cover everything, so now it looks like we have an orange background. Then we have grey circles growing outwards from really thin until they cover the entire background and we\'re back where we started from: a grey background.\"/><figcaption>Ripples (<a href=\"https://codepen.io/thebabydino/pen/bMMJKm\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>And a helix/rays effect in the conic case:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$p: 5%;\n\nhtml {\n  /* same as before */\n  background: repeating-conic-gradient(\n    var(--c0) 0 var(--pos, 0%), var(--c1) 0 $p);\n}\n\n@keyframes pos { 90%, 100% { --pos: #{$p} } }</code></pre>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/sweep_ray.gif\" alt=\"Animated gif. We start with a grey background and we have orange rays growing clockwise from really thin until they meet and cover everything, so now it looks like we have an orange background. Then we have grey rays growing clockwise from really thin until they cover the entire background and we\'re back where we started from: a grey background.\"/><figcaption>Growing rays (<a href=\"https://codepen.io/thebabydino/pen/qYYwLr\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>We can also add another CSS variable to make things more interesting:</p>\n<pre rel=\"SCSS\"><code class=\"language-scss\">$n: 20;\n\nhtml {\n  /* same as before */\n  background: radial-gradient(circle at var(--o, 50% 50%), \n    var(--c0) var(--pos, 0%), var(--c1) 0);\n  animation: a 0s infinite;\n  animation-name: c0, o, pos, c1;\n  animation-duration: 2*$t, $n*$t, $t;\n  animation-timing-function: steps(1), steps(1), ease-in-out;\n}\n\n@keyframes o {\n  @for $i from 0 to $n {\n    #{$i*100%/$n} { --o: #{random(100)*1%} #{random(100)*1%} }\n  }\n}</code></pre>\n<p>We need to register this variable for the whole thing to work:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">CSS.registerProperty({\n  name: \'--o\', \n  syntax: \'&lt;length-percentage&gt;+\', \n  initialValue: \'50%\'\n});</code></pre>\n<p>And that\'s it! The result can be seen below:</p>\n<figure><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/rand_grow.gif\" alt=\"Animated gif. We start with a grey background and we have an oranges disc, randomly positioned, growing from nothing until it covers everything, so now it looks like we have an orange background. Then we have grey disc, randomly positioned, growing from nothing until it covers the entire background and we\'re back where we started from: a grey background.\"/><figcaption>Randomly positioned growing discs (<a href=\"https://codepen.io/thebabydino/pen/jxxRgg\">live demo</a>, Blink browsers with flag only).</figcaption></figure>\n<p>I\'d say the future of changing gradients with keyframe animations looks pretty cool. But in the meanwhile, for cross-browser solutions, the <a href=\"https://css-tricks.com/emulating-css-timing-functions-javascript/\">JavaScript way</a> remains the only valid one.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/the-state-of-changing-gradients-with-css-transitions-and-animations/\">The State of Changing Gradients with CSS Transitions and Animations</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/the-state-of-changing-gradients-with-css-transitions-and-animations/',0,63,0,'2018-06-01 14:30:40','2018-06-07 11:51:41','2018-06-07 11:51:38','56c04126cfceca2dfbf6fd63ac2272c1','n6JLi24','\0',NULL),(2338579,36735,'Forms, Auth and Serverless Functions on Gatsby and Netlify','<p>Abstracting infrastructure is in our DNA. Roads, schools, water supply networks&mdash;you get the idea. Web development is no exception: <a href=\"https://snipcart.com/blog/webtask-baas-serverless-tutorial\">serverless architectures</a> are a beautiful expression of that phenomenon. <strong>Static sites, in particular, are turning into dynamic, rich experiences.</strong></p>\n<p>Handling <a href=\"https://thepowerofserverless.info/services.html#web-forms\">static forms</a>, <a href=\"https://thepowerofserverless.info/services.html#auth\">authentication</a>, and backend functions on statically-generated sites is now a thing. Especially with the <a href=\"https://snipcart.com/blog/jamstack-clients-static-site-cms\">JAMstack</a> pioneer platform that is <a href=\"https://www.netlify.com/?utm_source=css-tricks&utm_medium=post&utm_campaign=css-0518\">Netlify</a>. Recently, they <a href=\"https://www.netlify.com/blog/2018/03/20/netlifys-aws-lambda-functions-bring-the-backend-to-your-frontend-workflow/\">announced support of AWS Lambda functions</a> on front-end-centric sites and apps. I\'ve been meaning to dive into their \"backend\" features since.</p>\n<p>Today, I\'m doing just that, using <strong>a static Gatsby site, Netlify\'s Forms, Identity, and Functions features</strong>. This tutorial will show you how to:</p>\n<ul>\n<li>Add static forms to your site</li>\n<li>Add user authentication for password-protected content</li>\n<li>Create an AWS Lambda function</li>\n</ul>\n<p>Ready to supercharge a static site with serverless features? </p>\n<p><span id=\"more-270959\"></span></p>\n<p class=”explanation”>Consider checking out <a href=\"https://snipcart.com/blog/netlify-cms-react-git-workflow\">Netlify\'s React-powered static CMS</a> after this post! And here’s <a href=\"https://css-tricks.com/jamstack-comments/\">a tutorial on a whole comment workflow</a>, complete with an approval system, using the JAMstack.</p>\n<h3>Static site forms, auth, and AWS Lambda functions</h3>\n<figure id=\"post-270964\" class=\"align-none media-270964\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/netlify-static-forms-auth-functions.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_961,f_auto,q_auto/v1526078841/netlify-static-forms-auth-functions_eq3h17.png 961w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_631,f_auto,q_auto/v1526078841/netlify-static-forms-auth-functions_eq3h17.png 631w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078841/netlify-static-forms-auth-functions_eq3h17.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>Before diving into the code, let\'s detail our use case. I\'ll be using three different Netlify serverless features:</p>\n<h4>1. Identity</h4>\n<p><a href=\"https://www.netlify.com/docs/identity/\">Identity</a> will be used to create a password-protected, gated content section on the Gatsby site. Authentication without a backend has long been a pain on static sites. But this neat feature solves it elegantly, allowing developers to:</p>\n<blockquote><p>Manage signups, logins, password recovery, and more &mdash; all without rolling your own authentication service.</p></blockquote>\n<h4>2. Forms</h4>\n<p><a href=\"https://www.netlify.com/docs/form-handling/\">Forms</a> will be used to enable user-submitted product reviews on the site. Dynamic forms can take many <em>forms</em> (see what I did there?), from simple contact forms to commenting, quoting, and review systems hooked to internal tools.</p>\n<p>There\'s <a href=-\"https://medium.com/datafire-io/simple-backends-four-ways-to-implement-a-contact-us-form-on-a-static-website-10fc430984a4\">a plethora of solutions</a> to handle interactive forms on static sites. But with <strong>Forms</strong> you can handle them directly within your building and hosting service (Netlify\'s core offering). No need for spam trap <code>mailto:</code> links, configuring your own server, setting up serverless functions, or integrating third parties like <a href=\"https://formspree.io/\">Formspree</a> or <a href=\"https://formkeep.com/\">FormKeep</a>.</p>\n<p>No JavaScript, APIs, or backend needed: just a simple HTML form tagged with the <code>netlify</code> HTML attribute.</p>\n<h4>3. Functions</h4>\n<p><a href=\"https://www.netlify.com/docs/functions/\">Functions</a> will be used to set up a reviews moderation workflow directly in Slack. Under this feature\'s hood are <a href=\"https://aws.amazon.com/lambda/features/\">AWS Lambda functions</a>&mdash;event-triggered, scalable backend code you can run without your own server. Deploying these with Netlify is as simple as adding a file to a Git repo.</p>\n<p>Lambda functions are indeed powerful, but they normally require an AWS account and API gateway configuration. Like with <strong>Forms</strong>, <strong>Functions</strong> simplify your life by offloading the legwork to Netlify:</p>\n<blockquote><p>Your functions are version-controlled, built, and deployed along with the rest of your Netlify site, and the Netlify API gateway automatically handles service discovery. Plus, your functions benefit from the power of Deploy Previews and rollbacks.</p></blockquote>\n<p>In a nutshell, Functions allow you to enhance site interactivity + bridge the front and backend to let data flow between services.</p>\n<h3>Serverless Gatsby on Netlify: auth, static forms, and Lambda functions</h3>\n<figure id=\"post-270967\" class=\"align-none media-270967\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/gatsby-netlify-aws-lambda.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1526078854/gatsby-netlify-aws-lambda_cmmzvq.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078854/gatsby-netlify-aws-lambda_cmmzvq.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>I\'ll jumpstart this tutorial by using a stripped down version of <a href=\"https://github.com/snipcart/snipcart-gatsby-grav\">a previous Gatsby site we built</a>.</p>\n<p class=”explanation”>To learn Gatsby basics, check out <a href=\"https://www.gatsbyjs.org/tutorial/part-one/\">the official tutorial</a>. We also have two e-commerce tutorials with Gatsby <a href=\"https://snipcart.com/blog/snipcart-reactjs-static-ecommerce-gatsby\">here</a> and <a href=\"https://snipcart.com/blog/react-graphql-grav-cms-headless-tutorial\">here</a>.</p>\n<h4>Prerequisites</h4>\n<p>For this tutorial, you\'ll need:</p>\n<ul>\n<li><a href=\"https://app.netlify.com/signup\">A free Netlify account</a></li>\n<li>Netlify Forms Pro for the Slack integration (optional&mdash;paid feature)</li>\n</ul>\n<h4>1. Forking the Gatsby project</h4>\n<p>Start by forking the repo: </p>\n<p><a class=\"button\" href=\"https://github.com/snipcart/gatsby-netlify\">View on GitHub</a></p>\n<p>I suggest playing around with it to get familiar with the project. Products are in the <code>src/data/products</code> folder&mdash;all inside Markdown files. These files are loaded during the build time and used to inject the proper info in our templates. This is done inside the <code>gatsby-node.js</code> file.</p>\n<h4>2. Adding Identity for authentication</h4>\n<p>If you opened any product file, you probably saw there\'s a field we don\'t usually use in Snipcart demos: <strong>a private attribute</strong>. The goal is simple: show these \"exclusive\" products only when a user is logged in.</p>\n<p>To handle that, I used Netlify\'s Identity widget, a simple way of adding authentication to a static website.</p>\n<p>You can install the Identity package by running:</p>\n<pre rel=\"Terminal\"><code class=\"language-markup\">npm install --save netlify-identity-widget</code></pre>\n<p>Make sure to include it in your header! Inside the <code>src/components/Header/index.js</code> file, I added this line after the <code>h1</code> closing tag: </p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">&lt;div data-netlify-identity-menu&gt;&lt;/div&gt;</code></pre>\n<p>You can then import the widget at the top of your file with </p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const netlifyIdentity = require(\"netlify-identity-widget\");</code></pre>\n<p>And declare a <code>componentDidMount</code> function as such:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\" >componentDidMount(){    \n  netlifyIdentity.init();\n}</code></pre>\n<p>The Identity widget now injects proper login forms inside that <code>&lt;div&gt;</code>. Now that you have a static form to login, you need the appropriate logic to validate if a user is logged in or not.</p>\n<p>I used this logic to show appropriate, password-protected products to logged in users. To do so, I created a <code>products.js</code> inside the <code>src/pages</code> folder, and defined the following component:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">import React from \'react\'\nimport Link from \'gatsby-link\'\nimport styles from \'./products.module.css\'\nconst netlifyIdentity = require(\"netlify-identity-widget\");\n\nexport default class Products extends React.Component {\n  constructor(data){\n    super(data);\n\n    this.state = {\n      products: []\n    }\n  }\n\ngetProducts(){\n  return netlifyIdentity.currentUser() != null\n    ? this.props.data.allMarkdownRemark.edges\n    : this.props.data.allMarkdownRemark.edges\n      .filter(x =&gt; !x.node.frontmatter.private)  \n}\n\nupdateProducts(){\nthis.setState({ products: this.getProducts() });\n}\n\ncomponentDidMount(){\nnetlifyIdentity.on(\"login\", user =&gt; this.updateProducts());\nnetlifyIdentity.on(\"logout\", () =&gt; this.updateProducts());\nthis.updateProducts();\n}\n\nrender(){\nreturn (\n&lt;div&gt;\n  &lt;h1&gt;Products&lt;/h1&gt;\n  &lt;p&gt;To login use the email: geeks@snipcart.com with password: admin&lt;/p&gt;\n\n  &lt;ul className={styles.itemsList}&gt;\n    {this.state.products.map((o, index) =&gt;\n      &lt;li key={index} className={styles.item}&gt;\n        &lt;Link to={o.node.frontmatter.loc}&gt;\n          &lt;figure&gt;\n            &lt;img className={styles.image} src={o.node.frontmatter.image} alt={o.node.frontmatter.name}&gt;&lt;/img&gt;\n            &lt;figcaption className={styles.figCaption}&gt;Buy the {o.node.frontmatter.name} now&lt;/figcaption&gt;\n          &lt;/figure&gt;\n        &lt;/Link&gt;\n      &lt;/li&gt;\n    )}\n  &lt;/ul&gt;\n    &lt;/div&gt;)\n  }\n}\n\nexport const query = graphql`\nquery allProducts {\n  allMarkdownRemark {\n    edges {\n      node {\n        frontmatter {\n          sku,\n          loc,\n          price,\n          desc,\n          private,\n          name,\n          image\n        }\n      }\n    }\n  }\n`</code></pre>\n<p>I won\'t explain the GraphQL bit here. If you\'re interested, <a href=\"https://snipcart.com/blog/react-graphql-grav-cms-headless-tutorial\">read more here</a>.</p>\n<p>The important part to understand is what\'s happening inside the <code>componentDidMount</code>lifecycle function. I\'m binding myself to the widget \'login\' and \'logout\' events to update available products.</p>\n<p>The end-result is pretty awesome:</p>\n<figure id=\"post-270968\" class=\"align-none media-270968\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/netlify-gatsby-auth-login-flow.gif\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1526078863/netlify-gatsby-auth-login-flow_ychmeu.gif 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_876,f_auto,q_auto/v1526078863/netlify-gatsby-auth-login-flow_ychmeu.gif 876w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_703,f_auto,q_auto/v1526078863/netlify-gatsby-auth-login-flow_ychmeu.gif 703w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_490,f_auto,q_auto/v1526078863/netlify-gatsby-auth-login-flow_ychmeu.gif 490w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078863/netlify-gatsby-auth-login-flow_ychmeu.gif 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<h4>3. Handling static forms for reviews</h4>\n<p>To add product reviews to the Gatsby site, I used Netlify\'s Forms. You can include their Forms on your own site by adding a <code>\'data-netlify=\"true\"\'</code> (or just <code>netlify</code>) attribute to a form declaration. I included it in my <code>src/components/product.js</code> file, after the last <code>section</code> tag.</p>\n<p>You will also need to declare a <code>formId</code> variable before the return of your render function such as:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">render(){\n  if(this.props.data.markdownRemark.frontmatter.private\n    &amp;&amp; !this.state.loggedIn){\n    return fourOfour();\n  }\n\n  var formId = `product-${this.props.data.markdownRemark.frontmatter.sku}`\n\n  const button = this.props.data.markdownRemark.frontmatter.private ? (\n    &lt;button type=\"button\" className={`${styles.buyButton}`}&gt;\n        SOLD OUT\n    &lt;/button&gt;\n  ) : (\n  &lt;button type=\"button\" className={`${styles.buyButton} snipcart-add-item`}\n      data-item-name={this.props.data.markdownRemark.frontmatter.name}\n      data-item-id={this.props.data.markdownRemark.frontmatter.sku}\n      data-item-image={this.props.data.markdownRemark.frontmatter.image}\n      data-item-url={`${NETLIFY_URL}${this.props.location.pathname}`}\n      data-item-price={this.props.data.markdownRemark.frontmatter.price}\n      data-item-description={this.props.data.markdownRemark.frontmatter.desc}&gt;\n      Buy it now for {this.props.data.markdownRemark.frontmatter.price}$\n  &lt;/button&gt;\n);\n\nreturn (\n  &lt;div&gt;\n    &lt;h1&gt;{this.props.data.markdownRemark.frontmatter.name}&lt;/h1&gt;\n    &lt;div className={styles.breadcrumb}&gt;\n      &lt;Link to=\'/\'&gt;Back to the products&lt;/Link&gt;\n    &lt;/div&gt;\n    &lt;p&gt;{this.props.data.markdownRemark.frontmatter.desc}&lt;/p&gt;\n\n    &lt;section className=\"section__product\"&gt;\n      &lt;figure className={styles.productFigure}&gt;\n        &lt;img src={this.props.data.markdownRemark.frontmatter.image} /&gt;\n      &lt;/figure&gt;\n\n      &lt;article&gt;\n        {this.props.data.markdownRemark.frontmatter.description}\n      &lt;/article&gt;\n      &lt;div className={styles.actions}&gt;\n        {button}\n      &lt;/div&gt;\n    &lt;/section&gt;\n    &lt;section&gt;\n      &lt;h3 className=\"reviews\"&gt;Reviews&lt;/h3&gt;\n      &lt;div className=\"reviews__list\"&gt;\n        {this.state.reviews.map((o) =&gt;\n          &lt;p key={o.number}&gt;\n            &lt;div className=\"review__name\"&gt;{o.name}&lt;/div&gt;\n            &lt;div&gt;{o.data.message}&lt;/div&gt;\n          &lt;/p&gt;\n        )}\n      &lt;/div&gt;\n\n      &lt;form className=\"review__form\" name={formId} method=\"POST\" data-netlify-honeypot=\"bot-field\" data-netlify=\"true\"&gt;\n        &lt;input type=\"hidden\" name=\"form-name\" value={formId} /&gt;    \n        &lt;div className=\"field__form\"&gt;\n          &lt;label&gt;NAME&lt;/label&gt;\n          &lt;input type=\"text\" name=\"name\"&gt;&lt;/input&gt;\n        &lt;/div&gt;\n        &lt;div className=\"field__form\"&gt;\n          &lt;label&gt;EMAIL&lt;/label&gt;\n          &lt;input type=\"email\" name=\"email\"&gt;&lt;/input&gt;\n        &lt;/div&gt;\n        &lt;div className=\"field__form\"&gt;\n          &lt;label&gt;MESSAGE&lt;/label&gt;\n          &lt;textarea name=\"message\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n\n        &lt;button className=\"button__form\" type=\"submit\"&gt;SEND&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/section&gt;\n  &lt;/div&gt;)\n}</code></pre>\n<p>Boom, static forms are on your site!</p>\n<p>However, to show submissions coming in through these forms, you need a Netlify function to fetch and return user reviews. To do so, I created a <code>netlify.toml</code> file with the following content:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">[build]\n  functions = \"functions\"</code></pre>\n<p>I then put a <code>functions</code> folder directly in the root project. Inside it, I placed a <code>fetchreviews.js</code> file with:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const https = require(\'https\');\n\nexports.handler = function(event, context, callback) {\n  var id = event.queryStringParameters.id;\n  var token = process.env.netlify_access_token;\n\n    if(id == undefined){\n      callback(\'A product id must be specified.\', {\n        statusCode: 500\n    })\n  }\n\n  var options = {\n    hostname: \'api.netlify.com\',\n    port: 443,\n    method: \'GET\',\n    headers: {        \n      \'Content-Type\': \'application/json\'\n    }\n  };\n  \n  var queryToken = `access_token=${token}`;\n  var opts1 = Object.assign({}, options, { path: `/api/v1/sites/${process.env.site_id}/forms?${queryToken}`});\n\n  var req = https.request(opts1, function(res) {\n\n    res.setEncoding(\'utf8\');\n    var body = \"\";\n\n    res.on(\'data\', data =&gt; {\n      body += data;\n    });\n\n    res.on(\'end\', function () {\n      body = JSON.parse(body);\n\n      var form = body.filter(x =&gt; x.name == `product-${id}`)[0];\n      var opts2 = Object.assign({}, options, { path: `/api/v1/forms/${form.id}/submissions?${queryToken}`});\n\n      var req2 = https.request(opts2, function(res2) {\n        res2.setEncoding(\'utf8\');         \n        var body2 = \"\";\n\n        res2.on(\"data\", (data) =&gt; {\n          body2 += data;\n        });\n\n        res2.on(\'end\', function () {\n          callback(null, {\n            statusCode: 200,\n              headers: {\n                \"Access-Control-Allow-Origin\" : \"*\",\n                \'Content-Type\': \'application/json\'\n              },\n              body: body2\n            })\n          });\n        });\n\n        req2.end();\n      });\n  });\n\n  req.end();\n}</code></pre>\n<p>The function checks whether a product ID was given as a query parameter. If there is an ID, it fetches the form with the name <code>product-{product-id}</code> to get all the reviews from it. This way I could show reviews in the front end.</p>\n<p>I added two functions to <code>product.js</code> to do so:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">constructor(props){\n  super(props);\n\n  this.state = {\n    reviews: [],\n    loggedIn: false\n  }\n}\n\ncomponentDidMount(){\n  fetch(`https://${NETLIFY_FUNC}/fetchreviews?id=${this.props.data.markdownRemark.frontmatter.sku}`)\n    .then(x =&gt; x.json())\n    .then(x =&gt; {\n      this.setState({reviews: x})\n    })\n\n  if(netlifyIdentity.currentUser() != null){\n    this.setState({loggedIn: true});\n  }\n\n  netlifyIdentity.on(\"login\", user =&gt; this.setState({loggedIn: true}));\n  netlifyIdentity.on(\"logout\", () =&gt; this.setState({loggedIn: false}));\n}</code></pre>\n<p>Then, just before the review form:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">{this.state.reviews.map((o) =&gt;\n  &lt;p key={o.number}&gt;{o.name}: {o.data.message}&lt;/p&gt;\n)}</code></pre>\n<p>Above, the mounted component fetches the new functions to get specific product reviews. It also updates the state, and show them on the pages. You can also see that we decided to put a \"Sold out\" button for private products, this is because these are private and wouldn\'t pass our validation if we were to simply put the current URL, we could still do it but it would require a bit more work out of the scope of this demo.</p>\n<p>If you want to test your functions without deploying to Netlify, use the <code>netlify-lambda</code> node package to do so locally. Once you\'ve installed it (<code>npm install netlify-lambda</code>) run <code>netlify-lambda serve ./</code> in your project folder. The function will run at <code>http://localhost:9000/fetchreviews</code>.</p>\n<p>You can update the fetch route above and get the same behavior you\'d have with a hosted function.</p>\n<h4>4. Configuring an AWS Lambda function with Slack</h4>\n<p class=”explanation”>You will need Netlify Forms Pro in order to trigger a function on form submissions.</p>\n<p>Last but not least: the reviews moderation workflow directly in Slack. The goal is simple: push review details and notification to Slack and allow to either *keep* or *reject* review from Slack.</p>\n<p>To do so, I created 2 new functions in the <code>functions</code> folder: <code>notifyslack.js</code> and <code>answerslack.js</code>. The first is notified by Netlify\'s webhook of each form submission and is in charge of communicating this to Slack with appropriate action items. I created a small Slack app for this to work (<a href=\"https://api.slack.com/slack-apps\">reference</a>).</p>\n<p>Here are the permissions the app needs:</p>\n<figure id=\"post-270969\" class=\"align-none media-270969\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/slack-lambda-netlify-scope.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_768,f_auto,q_auto/v1526078879/slack-lambda-netlify-scope_tt1d3g.png 768w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078879/slack-lambda-netlify-scope_tt1d3g.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p><strong>Interactive components</strong> config:</p>\n<figure id=\"post-270970\" class=\"align-none media-270970\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/slack-lambda-netlify-interactive-components.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_784,f_auto,q_auto/v1526078881/slack-lambda-netlify-interactive-components_z7snxt.png 784w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078881/slack-lambda-netlify-interactive-components_z7snxt.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>The <strong>Request URL</strong> field is where your Netlify function can be called.</p>\n<p>With these set up, I installed my app and opened the <strong>Incoming webhooks</strong> tab. I copied the webhook URL, and got back to my project.</p>\n<p>Inside <code>functions</code>, I created the <code>notifyslack.js</code> file with:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var https = require(\"https\");\n\nexports.handler = function(event, context, callback) {\n  var body = JSON.parse(event.body);\n\n  if(body != null &amp;&amp; body.data != null){\n    var data = body.data;\n\n    var message = `New review from ${data.email} \\n ${data.name}: ${data.message}`;\n    var attach = [\n      {\n        \"title\": \"Review ID\",\n        \"text\": body.id\n      },\n      {\n        \"title\": \"Do you want to keep the review?\",\n        \"text\": message,\n        \"fallback\": \"You can\'t take actions for this review.\",\n        \"callback_id\": \"answer_netlify\",\n        \"color\": \"#3AA3E3\",\n        \"attachment_type\": \"default\",\n        \"actions\": [\n        {\n          \"name\": \"response\",\n          \"text\": \"Keep\",\n          \"type\": \"button\",\n          \"value\": \"keep\"\n        },\n        {\n          \"name\": \"response\",\n          \"text\": \"Reject\",\n          \"type\": \"button\",\n          \"style\": \"danger\",\n          \"value\": \"reject\",\n          \"confirm\": {\n            \"title\": \"Are you sure?\",\n            \"text\": \"Once it\'s done the review will be deleted\",\n            \"ok_text\": \"Yes\",\n            \"dismiss_text\": \"No\"\n          }\n        }\n        ]\n      }\n    ]\n\n    var postData = JSON.stringify({\n      attachments: attach\n    });\n  \n    var options = {\n      hostname: \'hooks.slack.com\',\n      port: 443,\n      path: process.env.slack_webhook_url,\n      method: \'POST\',\n      headers: {        \n        \'Content-Type\': \'application/json\'\n      }\n    };\n      \n    var req = https.request(options, function(res) {\n  \n      res.setEncoding(\'utf8\');\n        \n      res.on(\'end\', function () {\n        callback(null, {\n          statusCode: 200\n        })\n      });\n    });\n          \n    req.on(\'error\', function (e) {\n      console.log(\'Problem with request:\', e.message);\n    });\n  \n    req.write(postData);\n    req.end();\n  \n    callback(null, {\n      statusCode: 200\n    })\n  }\n}</code></pre>\n<p>Here, you need to update the path value of the options object with your corresponding Slack app webhook URL.</p>\n<p>At the moment, this would only notify Slack&mdash;whatever action you chose wouldn\'t trigger anything else.</p>\n<p>To make the Slack notification interactive, I created a 3rd function inside a file called <code>answerslack.js</code>. This function is probably the most complicated, but it\'s mostly requests overhead, so bear with me:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">var https = require(\"https\");\nvar qs = require(\'querystring\')\n\nfunction getURL(href) {\n  var match = href.match(/^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)([\\/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);\n  return match &amp;&amp; {\n    href: href,\n    protocol: match[1],\n    host: match[2],\n    hostname: match[3],\n    port: match[4],\n    pathname: match[5],\n    search: match[6],\n    hash: match[7]\n  }\n}\n\nexports.handler = function(event, context, callback) {\n  var json = JSON.parse(qs.parse(event.body).payload);\n\n  var answer = json.actions[0].value;\n  var access_token = process.env.netlify_access_token;\n  var id = json.original_message.attachments[0].text;\n  \n  if(answer == \'reject\'){\n    var options = {\n      hostname: \'api.netlify.com\',\n      port: 443,\n      path: `/api/v1/submissions/${id}?access_token=${access_token}`,\n      method: \'DELETE\',\n      headers: {        \n        \'Content-Type\': \'application/json\'\n      }\n    };\n    \n    var req1 = https.request(options, function(res) {\n\n      res.setEncoding(\'utf8\');\n            \n      res.on(\'end\', function () {\n        console.log(`Review with id: ${id} was deleted successfully.`)\n      });\n    });\n        \n    req1.on(\'error\', function (e) {\n      console.log(\'Problem with request:\', e.message);\n    });\n\n    req1.end(); \n  }\n\n  var postData  = JSON.stringify({\n    replace_original: true,\n    attachments: [{\n      text: answer == \'keep\'\n        ? `The review (${id}) was approved!`\n        : `The review (${id}) was rejected.`\n    }]\n  });\n\n  var url = getURL(json.response_url);\n\n  var options = {\n    hostname: url.hostname,\n    path: url.pathname,\n    method: \'POST\',\n    headers: {        \n      \'Content-Type\': \'application/json\'\n    }\n  };\n\n  var req = https.request(options, function(res) {\n\n    res.setEncoding(\'utf8\');\n        \n    res.on(\'end\', function () {\n      callback(null, {\n        statusCode: 200\n      })\n    });\n  });\n    \n  req.on(\'error\', function (e) {\n    console.log(\'Problem with request:\', e.message);\n  });\n\n  req.write(postData);\n  req.end();\n\n  callback(null, {\n    statusCode: 200\n  })    \n}</code></pre>\n<p>I parse the event payload and check whether the action value was <code>reject</code>. If it\'s not, it\'s necessarily <code>keep</code>&mdash;nothing to do. But if it is, I need to call Netlify\'s API to delete the rejected review. I\'m retrieving the review ID put earlier inside the first attachment text with the following line: </p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">json.original_message.attachments[0].text;</code></pre>\n<p>Once done, I can delete it with one API call. I then give our Slack users feedback by calling the response URL.</p>\n<p>I\'m kind of proud of the final workflow here <abbr title=”to be honest”>TBH</abbr>:</p>\n<figure id=\"post-270971\" class=\"align-none media-270971\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/gatsby-static-form-aws-slack-workflow.gif\" alt=\"\" /></figure>\n<h4>5. Deploying the Gatsby site on Netlify</h4>\n<p>Here, I pushed everything to GitHub and hooked it up to Netlify using these settings:</p>\n<figure id=\"post-270966\" class=\"align-none media-270966\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/gatsby-netlify-settings.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_386,f_auto,q_auto/v1526078851/gatsby-netlify-settings_pl7aiz.png 386w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078851/gatsby-netlify-settings_pl7aiz.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>You can see we\'ve used some of the environment variables with the <code>process.env.{variable}</code> notation in the demo.</p>\n<p>These are private settings we don\'t want to make public. To define yours directly, go to <strong>/settings/deploys</strong> in Netlify\'s dashboard, hit <strong>Edit variables</strong>, and input the following:</p>\n<p><uL></p>\n<li><code>netlify_access_token</code>: The token created earlier inside netlify</li>\n<li><code>site_id</code>: Your website url without the protocol</li>\n<li><code>slack_webhook_url</code>: Your Slack app webhook URL</li>\n<p></uL></p>\n<p>Website deployed; time to play around!</p>\n<p class=\"explanation\"><a href=\"https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/\">Read this</a> to learn how to deploy a site on Netlify.</p>\n<h3>Live demo and GitHub repo</h3>\n<figure id=\"post-270965\" class=\"align-none media-270965\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/gatsby-forms-functions-demo.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1526078846/gatsby-forms-functions-demo_ruthoy.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_917,f_auto,q_auto/v1526078846/gatsby-forms-functions-demo_ruthoy.png 917w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_686,f_auto,q_auto/v1526078846/gatsby-forms-functions-demo_ruthoy.png 686w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1526078846/gatsby-forms-functions-demo_ruthoy.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p><a class=\"button\" href=\"https://gatsby-netlify-snipcart.netlify.com/”>Live Demo</a></p>\n<p><a class=\"button\" href=\"https://gatsby-netlify-snipcart.netlify.com/\">GitHub Repo</a></p>\n<h3>Closing thoughts</h3>\n<p>This demo took me way more time than expected&mdash;a bit of docs misreading on my part, I\'ll admit.</p>\n<p>The challenge was mostly to bundle all services together in good fashion. The biggest hurdle was that functions were not loading properly when launched to Netlify; they would error on each call. For some reason, my project node dependencies were not accessible. I decided to ditch the package I was using to make my requests and use the good ol\' <code>https</code>native package instead.</p>\n<p>Also, constantly pushing to Netlify to test my functions for fear of them not behaving the same as locally was a bit of a pain.</p>\n<p>Now, a few tweaks could be done to improve upon this demo, but overall, I\'m super satisfied. Pretty dynamic as far as static sites go, wouldn\'t you say? :)</p>\n<p>I sincerely hope this helps developers get started with Netlify\'s backend features. If you do build similar JAMstack projects, make sure to send them our way.</p>\n<p>We\'d love to dig in your code!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/forms-auth-and-serverless-functions-on-gatsby-and-netlify/\">Forms, Auth and Serverless Functions on Gatsby and Netlify</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/forms-auth-and-serverless-functions-on-gatsby-and-netlify/',0,25,0,'2018-05-31 15:45:25','2018-06-07 11:51:44','2018-06-07 11:51:41','3d7d1f16b5d1db5488bc20ea43b30a0e','j4R2L-Y','\0',NULL),(2338580,36735,'​Customize payment solutions with our enhanced platform','<p>(This is a <a href=\'https://css-tricks.com/advertising\'>sponsored post</a>.)</p><p>We’ve upped our game by using developers’ feedback to improve the Authorize.Net payment platform. Check out our new, streamlined API, better sample code and SDKs, and use them to provide your merchants with a secure, scalable payment solution. You’ll see that it’s a seamless and efficient way to make sure you and your merchants get paid!</p>\n<p><a href=\"https://synd.co/2KOQvzB\">Start playing</a></p>\n<p><a href=\"https://synd.co/2KOQvzB\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/customize-payment-solutions-with-our-enhanced-platform/\">Permalink</a></p><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/customize-payment-solutions-with-our-enhanced-platform/\">​Customize payment solutions with our enhanced platform</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://synd.co/2KOQvzB',0,0,0,'2018-05-31 15:17:09','2018-06-07 11:51:48','2018-06-07 11:51:45','2b4fe064011cc2df2adfefbe2f963583','F-5z2E7','\0',NULL),(2338581,36735,'Transmit Droplets','<p>Ethan Marcotte <a href=\"https://ethanmarcotte.com/wrote/bukkit/\">documented his workflow</a> for storing GIFs in a web directory. Sometimes just SFTPing files into a folder is as fancy a workflow as you need, and in fact, modern workflows don\'t have anything on it!</p>\n<p>I\'ve also used Transmit\'s fancy features for this kind of thing. I prefer saving the connection as a Droplet, which is basically a little application you can drop a file onto and have it upload to exactly where you want it...say a GIF in a specific server directory.</p>\n<p><span id=\"more-271626\"></span></p>\n<figure id=\"post-271627\" class=\"align-none media-271627\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/droplet.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527174593/droplet_cyk8tw.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_679,f_auto,q_auto/v1527174593/droplet_cyk8tw.png 679w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527174593/droplet_cyk8tw.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>There are two things that make this even more useful. One, you can have it copy the URL after uploading:</p>\n<figure id=\"post-271628\" class=\"align-none media-271628\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/copy-url-in-transmit.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_924,f_auto,q_auto/v1527174661/copy-url-in-transmit_xhcisu.png 924w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_789,f_auto,q_auto/v1527174661/copy-url-in-transmit_xhcisu.png 789w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527174661/copy-url-in-transmit_xhcisu.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>Two, you can set rules for file types so that they have the right permissions as soon as they are uploaded. I find this particularly useful for S3 where by default they aren\'t \"world readable\" and need to be changed manually. This rule prevents that from being a manual step every time.</p>\n<figure id=\"post-271629\" class=\"align-none media-271629\"><img src=\"https://cdn.css-tricks.com/wp-content/uploads/2018/05/s3-permissions-transmit.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1527174751/s3-permissions-transmit_oscmeb.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_921,f_auto,q_auto/v1527174751/s3-permissions-transmit_oscmeb.png 921w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_626,f_auto,q_auto/v1527174751/s3-permissions-transmit_oscmeb.png 626w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1527174751/s3-permissions-transmit_oscmeb.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\" /></figure>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/transmit-droplets/\">Transmit Droplets</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>.</p>\n','https://css-tricks.com/transmit-droplets/',0,31,0,'2018-05-30 21:42:32','2018-06-07 11:51:51','2018-06-07 11:51:47','59ad782f7167f8eb33324d5bf389310e','d4B6Wfe','\0',NULL);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-06-07 13:04:30
